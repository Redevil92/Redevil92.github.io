{"version":3,"file":"js/4049.793f55ce.js","mappings":"wRAUA,GAA6BA,EAAAA,EAAAA,IAAiB,CAC1CC,OAAQ,qBACRC,MAAO,CACHC,WAAYC,OACZC,OAAQ,CAAEC,KAAMC,OAAQC,QAAS,MAErCC,MAAMC,GACF,MAAMR,EAAQQ,EACRC,GAAkBC,EAAAA,EAAAA,MAClB,eAAEC,EAAF,mCAAkBC,IAAuCC,EAAAA,EAAAA,KACzDC,GAAQC,EAAAA,EAAAA,IAAI,IACZC,GAAwBD,EAAAA,EAAAA,KAAI,IAClCE,EAAAA,EAAAA,KAAc,gBACJC,EAAsBC,EAAAA,IACxBnB,EAAMC,YAAYmB,mBAAmBJ,wBACrCA,EAAsBK,MAAQrB,EAAMC,WAAWmB,mBAAmBJ,sBACrE,KAELM,EAAAA,EAAAA,KAAY,UACR,IAAK,MAAMC,KAAYT,EAAMO,YACnBZ,EAAgBe,qBAAqBD,EAC9C,IAEL,MAAME,EAAqB,UACvB,MAAMC,QAAoBC,EAAAA,EAAAA,MAAiBJ,GAC3C,IAAIG,EAGC,CACD,MAAME,EAAgB,CAClBC,KAAMN,EACNO,YAAa,CAAEC,EAAG,EAAGC,EAAG,GACxBC,YAAY,SAEVxB,EAAgByB,iBAAiBN,EAC1C,GAECV,EAAwB,UAC1B,GAAIlB,EAAMC,YAAY4B,KAAM,CACxB,IAAIM,QAAmBR,EAAAA,EAAAA,SAAoB3B,EAAMC,YAAY4B,MAC7D,MAAMO,EAAoBzB,EAAewB,GAGnCE,QAA2BzB,EAAmCwB,EAAmBE,GAEvFxB,EAAMO,MAAQgB,QACR5B,EAAgB8B,kCAChB9B,EAAgB+B,oBACtBxB,EAAsBK,OAAQ,CACjC,GAECoB,EAAyBC,IAC3BC,EAAeD,EAAaE,OAAO,EAAOF,EAAanB,SAAvD,EAEEoB,EAAiB,MAAOC,EAAOC,GAAiB,EAAOC,KACzDF,EAAMG,iBACNH,EAAMI,kBACN,MAAMC,EAAeL,EACfM,EAAgB,EAACC,EAAAA,EAAAA,IAAW,CAACL,IAAa,GAAO,SAAcM,EAAAA,EAAAA,IAAe,CAACN,KACrFrC,EAAgB4C,cAAc,CAC1BC,MAAM,EACNC,MAAOT,EAAa,CAACA,GAAc,CAAC9C,EAAMC,YAAY4B,MACtD2B,SAAU,CAAEzB,EAAGkB,EAAaQ,QAASzB,EAAGiB,EAAaS,SACrDC,aAAcT,GAJlB,EAOJ,MAAO,CAACU,EAAMC,MACFC,EAAAA,EAAAA,OAAcC,EAAAA,EAAAA,IAAoB,MAAO,CAC7CC,OAAOC,EAAAA,EAAAA,IAAiB,mCAAkCzD,EAAQL,OAAS,QAC5E,CACEa,EAAsBK,QAChByC,EAAAA,EAAAA,OAAcI,EAAAA,EAAAA,IAAaC,EAAAA,EAAsB,CAChDC,IAAK,EACLC,mBAAoBnD,EACpBoD,cAAeT,EAAO,KAAOA,EAAO,GAAMU,GAAYvD,EAAsBK,OAAQ,GACpFmD,iBAAiB,EACjBC,iBAAkB,cAEpBC,EAAAA,EAAAA,IAAoB,IAAI,IAC9BC,EAAAA,EAAAA,IAAaC,EAAAA,WAAiB,CAC1BzE,OAAQK,EAAQL,OAAS,GACzB0E,UAAW/D,EAAMO,MACjByD,WAAW,EACXC,UAAWvE,EAAQP,YAAY8E,UAC/BC,gBAAiBvD,EACjBwD,eAAgBxC,GACjB,KAAM,EAAG,CAAC,SAAU,YAAa,eACrC,GAEV,IChGL,MAAMyC,EAAc,EAEpB,O","sources":["webpack://my-portfolio/./node_modules/vue-loader/dist/index.js","webpack://my-portfolio/./src/components/apps/compressedFileItem/CompressedFileItem.vue"],"sourcesContent":["import { defineComponent as _defineComponent } from 'vue'\nimport { openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createVNode as _createVNode, normalizeStyle as _normalizeStyle, createElementBlock as _createElementBlock } from \"vue\"\n\nimport { onBeforeMount, onUnmounted, PropType, ref } from \"vue\";\r\n\r\nimport SelectedFolderDialog from \"@/components/shared/SelectedFolderDialog.vue\";\r\nimport FolderItemsList from \"@/components/apps/folderItem/FolderItemsList.vue\";\r\n\r\nimport ItemDialog from \"@/models/ItemDialog\";\r\nimport fileSystem from \"@/context/fileSystemController\";\r\nimport { useFileSystemStore } from \"@/stores/fileSystemStore\";\r\n\r\nimport DesktopItem from \"@/models/DesktopItem\";\r\nimport ActionMenu from \"@/models/ActionMenu/ActionMenu\";\r\nimport useCompression from \"@/hooks/useCompression\";\r\nimport { TEMP_PATH } from \"@/constants\";\r\nimport { copyAction, openFileAction } from \"@/components/system/actionMenu/actionsList\";\r\n\r\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'CompressedFileItem',\n  props: {\r\n  itemDialog: Object as PropType<ItemDialog>,\r\n  height: { type: Number, default: 200 },\r\n},\n  setup(__props) {\n\r\nconst props = __props;\r\n\r\nconst fileSystemStore = useFileSystemStore();\r\nconst { decompressFile, saveDecompressedFilesToDestination } = useCompression();\r\nconst items = ref<string[]>([]);\r\nconst showExtractHereDialog = ref<boolean>(false);\r\n\r\nonBeforeMount(async () => {\r\n  await decompressFileAndSave(TEMP_PATH);\r\n  if (props.itemDialog?.additionalOptions?.showExtractHereDialog) {\r\n    showExtractHereDialog.value = props.itemDialog.additionalOptions?.showExtractHereDialog;\r\n  }\r\n});\r\n\r\nonUnmounted(async () => {\r\n  for (const filePath of items.value) {\r\n    await fileSystemStore.deleteFileSystemItem(filePath);\r\n  }\r\n});\r\n\r\nconst doubleClickHandler = async (filePath: string) => {\r\n  const isDirectory = await fileSystem.isDir(filePath);\r\n  if (isDirectory) {\r\n    return;\r\n  } else {\r\n    const newItemDialog = {\r\n      path: filePath,\r\n      coordinates: { x: 0, y: 0 },\r\n      isSelected: true,\r\n    } as DesktopItem;\r\n\r\n    await fileSystemStore.createItemDialog(newItemDialog);\r\n  }\r\n};\r\n\r\nconst decompressFileAndSave = async (destinationFile: string) => {\r\n  if (props.itemDialog?.path) {\r\n    let compressed = await fileSystem.readFile(props.itemDialog?.path);\r\n\r\n    const decompressedFiles = decompressFile(compressed);\r\n\r\n    //TODO: From the decompressed files delete the part of the path common to all the files\r\n    // After that create the file structure, folders and paths. At the moment we have a flat structure\r\n\r\n    const allCompressedFiles = await saveDecompressedFilesToDestination(decompressedFiles, destinationFile);\r\n    //items.value = await getFiles(destinationFile); // TODO: this would be nice, now we have all the items flat in the directory\r\n    items.value = allCompressedFiles;\r\n\r\n    await fileSystemStore.refreshAllItemDialogFiles();\r\n    await fileSystemStore.fetchDesktopItems();\r\n    showExtractHereDialog.value = false;\r\n  }\r\n};\r\n\r\nconst rightClickItemHandler = (eventAndPath: { event: Event; filePath: string }) => {\r\n  openActionMenu(eventAndPath.event, false, eventAndPath.filePath);\r\n};\r\n\r\nconst openActionMenu = async (event: any, isOpenedFolder = false, customPath: string) => {\r\n  event.preventDefault();\r\n  event.stopPropagation();\r\n  const pointerEvent = event as PointerEvent;\r\n\r\n  const customActions = [copyAction([customPath], false, false), await openFileAction([customPath])];\r\n\r\n  fileSystemStore.setActionMenu({\r\n    show: true,\r\n    paths: customPath ? [customPath] : [props.itemDialog?.path],\r\n    position: { x: pointerEvent.clientX, y: pointerEvent.clientY },\r\n    customLayout: customActions,\r\n  } as ActionMenu);\r\n};\r\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"div\", {\n    style: _normalizeStyle(` width: calc(100% -4px); height:${__props.height - 5}px`)\n  }, [\n    (showExtractHereDialog.value)\n      ? (_openBlock(), _createBlock(SelectedFolderDialog, {\n          key: 0,\n          onOnFolderSelected: decompressFileAndSave,\n          onCloseDialog: _cache[0] || (_cache[0] = ($event: any) => (showExtractHereDialog.value = false)),\n          showSaveAsInput: false,\n          actionButtonText: \"Extract\"\n        }))\n      : _createCommentVNode(\"\", true),\n    _createVNode(FolderItemsList, {\n      height: __props.height - 10,\n      itemsList: items.value,\n      canRename: false,\n      isFocused: __props.itemDialog?.isFocused,\n      onOnDoubleClick: doubleClickHandler,\n      onOnRightClick: rightClickItemHandler\n    }, null, 8, [\"height\", \"itemsList\", \"isFocused\"])\n  ], 4))\n}\n}\n\n})","import script from \"./CompressedFileItem.vue?vue&type=script&lang=ts&setup=true\"\nexport * from \"./CompressedFileItem.vue?vue&type=script&lang=ts&setup=true\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["_defineComponent","__name","props","itemDialog","Object","height","type","Number","default","setup","__props","fileSystemStore","useFileSystemStore","decompressFile","saveDecompressedFilesToDestination","useCompression","items","ref","showExtractHereDialog","onBeforeMount","decompressFileAndSave","TEMP_PATH","additionalOptions","value","onUnmounted","filePath","deleteFileSystemItem","doubleClickHandler","isDirectory","fileSystem","newItemDialog","path","coordinates","x","y","isSelected","createItemDialog","compressed","decompressedFiles","allCompressedFiles","destinationFile","refreshAllItemDialogFiles","fetchDesktopItems","rightClickItemHandler","eventAndPath","openActionMenu","event","isOpenedFolder","customPath","preventDefault","stopPropagation","pointerEvent","customActions","copyAction","openFileAction","setActionMenu","show","paths","position","clientX","clientY","customLayout","_ctx","_cache","_openBlock","_createElementBlock","style","_normalizeStyle","_createBlock","SelectedFolderDialog","key","onOnFolderSelected","onCloseDialog","$event","showSaveAsInput","actionButtonText","_createCommentVNode","_createVNode","FolderItemsList","itemsList","canRename","isFocused","onOnDoubleClick","onOnRightClick","__exports__"],"sourceRoot":""}