{"version":3,"file":"js/7691.da271345.js","mappings":"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","sources":["webpack://my-portfolio/./src/components/apps/audioItem/AudioAnalyzer.vue?540f","webpack://my-portfolio/./src/components/apps/audioItem/AudioAnalyzer.vue","webpack://my-portfolio/./src/components/apps/audioItem/AudioAnalyzer.vue?605a","webpack://my-portfolio/./src/components/apps/audioItem/AudioPlayer.vue?c841","webpack://my-portfolio/./src/components/apps/audioItem/AudioPlayer.vue","webpack://my-portfolio/./src/components/apps/audioItem/AudioPlayer.vue?2290"],"sourcesContent":["import { defineComponent as _defineComponent } from 'vue'\nimport { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\"\n\nimport { onMounted, PropType, ref } from \"vue\";\r\n\r\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'AudioAnalyzer',\n  props: { audioElement: Object as PropType<HTMLAudioElement> },\n  setup(__props) {\n\r\nconst props = __props;\r\n\r\nconst canvasRef = ref<HTMLCanvasElement>();\r\n\r\nconst analyzer = ref<AnalyserNode | null>(null);\r\nconst audioCtx = ref(new window.AudioContext());\r\n\r\nfunction animate() {\r\n  if (canvasRef.value && analyzer.value) {\r\n    const bufferLength = analyzer.value.frequencyBinCount;\r\n    const dataArray = new Uint8Array(bufferLength);\r\n\r\n    const ctx = canvasRef.value.getContext(\"2d\") as CanvasRenderingContext2D;\r\n    ctx?.clearRect(0, 0, canvasRef.value.width, canvasRef.value.height);\r\n\r\n    analyzer.value?.getByteFrequencyData(dataArray);\r\n\r\n    drawVisualizer(bufferLength, dataArray, ctx, canvasRef.value);\r\n  }\r\n\r\n  requestAnimationFrame(animate);\r\n}\r\n\r\nconst drawVisualizer = (\r\n  bufferLength: number,\r\n  dataArray: Uint8Array,\r\n\r\n  ctx: CanvasRenderingContext2D,\r\n  canvas: HTMLCanvasElement,\r\n) => {\r\n  const style = getComputedStyle(document.body);\r\n  ctx.fillStyle = style.getPropertyValue(\"--font-color\");\r\n\r\n  let barHeight;\r\n  const barWidth = canvas.width / 2 / bufferLength;\r\n  let firstX = 0;\r\n  let secondX = bufferLength * barWidth;\r\n\r\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n  fixDpi();\r\n\r\n  const maxDataArrayValue = 255;\r\n\r\n  for (let i = 0; i < bufferLength; i++) {\r\n    barHeight = (dataArray[i] / maxDataArrayValue) * canvas.height;\r\n    // const red = (i * barHeight) / 10;\r\n    // const green = i * 4;\r\n    // const blue = barHeight / 4 - 12;\r\n\r\n    roundRect(ctx, canvas.width / 2 - firstX, (canvas.height - barHeight) / 2, barWidth / 1.7, barHeight, 30);\r\n    roundRect(ctx, secondX, (canvas.height - barHeight) / 2, barWidth / 1.7, barHeight, 30);\r\n\r\n    //ctx.fillRect(canvas.width / 2 - firstX, canvas.height - barHeight, barWidth - 1, barHeight);\r\n    firstX += barWidth;\r\n    //ctx.fillRect(secondX, canvas.height - barHeight, barWidth - 1, barHeight);\r\n    secondX += barWidth;\r\n  }\r\n};\r\n\r\nconst fixDpi = () => {\r\n  const dpi = window.devicePixelRatio;\r\n\r\n  if (canvasRef.value) {\r\n    const height = +getComputedStyle(canvasRef.value).getPropertyValue(\"height\").slice(0, -2);\r\n    //get CSS width\r\n    const width = +getComputedStyle(canvasRef.value).getPropertyValue(\"width\").slice(0, -2);\r\n    //scale the canvas\r\n    canvasRef.value.setAttribute(\"height\", (height * dpi).toString());\r\n    canvasRef.value.setAttribute(\"width\", (width * dpi).toString());\r\n  }\r\n};\r\n\r\nconst roundRect = function (\r\n  ctx: CanvasRenderingContext2D,\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number,\r\n  radius: number,\r\n) {\r\n  if (width < 2 * radius) {\r\n    radius = width / 2;\r\n  }\r\n  if (height < 2 * radius) {\r\n    radius = height / 2;\r\n  }\r\n  const color = getComputedStyle(document.body).getPropertyValue(\"--font-color\");\r\n\r\n  ctx.fillStyle = color;\r\n  ctx.beginPath();\r\n  ctx.moveTo(x + radius, y);\r\n  ctx.arcTo(x + width, y, x + width, y + height, radius);\r\n  ctx.arcTo(x + width, y + height, x, y + height, radius);\r\n  ctx.arcTo(x, y + height, x, y, radius);\r\n  ctx.arcTo(x, y, x + width, y, radius);\r\n  ctx.closePath();\r\n\r\n  ctx.fill();\r\n};\r\n\r\nconst setAnalyzer = () => {\r\n  if (props.audioElement && canvasRef.value) {\r\n    const mediaElement = audioCtx.value.createMediaElementSource(props.audioElement);\r\n\r\n    analyzer.value = audioCtx.value.createAnalyser();\r\n\r\n    mediaElement.connect(analyzer.value);\r\n    analyzer.value.connect(audioCtx.value.destination);\r\n\r\n    analyzer.value.smoothingTimeConstant = 0.9;\r\n    analyzer.value.fftSize = 32;\r\n\r\n    animate();\r\n  }\r\n};\r\n\r\nonMounted(async () => {\r\n  setAnalyzer();\r\n});\r\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"canvas\", {\n    id: \"canvas-audio\",\n    ref_key: \"canvasRef\",\n    ref: canvasRef,\n    class: \"audio-canvas\"\n  }, null, 512))\n}\n}\n\n})","<template>\r\n  <canvas id=\"canvas-audio\" ref=\"canvasRef\" class=\"audio-canvas\"></canvas>\r\n</template>\r\n\r\n<script lang=\"ts\" setup>\r\nimport { onMounted, PropType, ref } from \"vue\";\r\n\r\nconst props = defineProps({ audioElement: Object as PropType<HTMLAudioElement> });\r\n\r\nconst canvasRef = ref<HTMLCanvasElement>();\r\n\r\nconst analyzer = ref<AnalyserNode | null>(null);\r\nconst audioCtx = ref(new window.AudioContext());\r\n\r\nfunction animate() {\r\n  if (canvasRef.value && analyzer.value) {\r\n    const bufferLength = analyzer.value.frequencyBinCount;\r\n    const dataArray = new Uint8Array(bufferLength);\r\n\r\n    const ctx = canvasRef.value.getContext(\"2d\") as CanvasRenderingContext2D;\r\n    ctx?.clearRect(0, 0, canvasRef.value.width, canvasRef.value.height);\r\n\r\n    analyzer.value?.getByteFrequencyData(dataArray);\r\n\r\n    drawVisualizer(bufferLength, dataArray, ctx, canvasRef.value);\r\n  }\r\n\r\n  requestAnimationFrame(animate);\r\n}\r\n\r\nconst drawVisualizer = (\r\n  bufferLength: number,\r\n  dataArray: Uint8Array,\r\n\r\n  ctx: CanvasRenderingContext2D,\r\n  canvas: HTMLCanvasElement,\r\n) => {\r\n  const style = getComputedStyle(document.body);\r\n  ctx.fillStyle = style.getPropertyValue(\"--font-color\");\r\n\r\n  let barHeight;\r\n  const barWidth = canvas.width / 2 / bufferLength;\r\n  let firstX = 0;\r\n  let secondX = bufferLength * barWidth;\r\n\r\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n  fixDpi();\r\n\r\n  const maxDataArrayValue = 255;\r\n\r\n  for (let i = 0; i < bufferLength; i++) {\r\n    barHeight = (dataArray[i] / maxDataArrayValue) * canvas.height;\r\n    // const red = (i * barHeight) / 10;\r\n    // const green = i * 4;\r\n    // const blue = barHeight / 4 - 12;\r\n\r\n    roundRect(ctx, canvas.width / 2 - firstX, (canvas.height - barHeight) / 2, barWidth / 1.7, barHeight, 30);\r\n    roundRect(ctx, secondX, (canvas.height - barHeight) / 2, barWidth / 1.7, barHeight, 30);\r\n\r\n    //ctx.fillRect(canvas.width / 2 - firstX, canvas.height - barHeight, barWidth - 1, barHeight);\r\n    firstX += barWidth;\r\n    //ctx.fillRect(secondX, canvas.height - barHeight, barWidth - 1, barHeight);\r\n    secondX += barWidth;\r\n  }\r\n};\r\n\r\nconst fixDpi = () => {\r\n  const dpi = window.devicePixelRatio;\r\n\r\n  if (canvasRef.value) {\r\n    const height = +getComputedStyle(canvasRef.value).getPropertyValue(\"height\").slice(0, -2);\r\n    //get CSS width\r\n    const width = +getComputedStyle(canvasRef.value).getPropertyValue(\"width\").slice(0, -2);\r\n    //scale the canvas\r\n    canvasRef.value.setAttribute(\"height\", (height * dpi).toString());\r\n    canvasRef.value.setAttribute(\"width\", (width * dpi).toString());\r\n  }\r\n};\r\n\r\nconst roundRect = function (\r\n  ctx: CanvasRenderingContext2D,\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number,\r\n  radius: number,\r\n) {\r\n  if (width < 2 * radius) {\r\n    radius = width / 2;\r\n  }\r\n  if (height < 2 * radius) {\r\n    radius = height / 2;\r\n  }\r\n  const color = getComputedStyle(document.body).getPropertyValue(\"--font-color\");\r\n\r\n  ctx.fillStyle = color;\r\n  ctx.beginPath();\r\n  ctx.moveTo(x + radius, y);\r\n  ctx.arcTo(x + width, y, x + width, y + height, radius);\r\n  ctx.arcTo(x + width, y + height, x, y + height, radius);\r\n  ctx.arcTo(x, y + height, x, y, radius);\r\n  ctx.arcTo(x, y, x + width, y, radius);\r\n  ctx.closePath();\r\n\r\n  ctx.fill();\r\n};\r\n\r\nconst setAnalyzer = () => {\r\n  if (props.audioElement && canvasRef.value) {\r\n    const mediaElement = audioCtx.value.createMediaElementSource(props.audioElement);\r\n\r\n    analyzer.value = audioCtx.value.createAnalyser();\r\n\r\n    mediaElement.connect(analyzer.value);\r\n    analyzer.value.connect(audioCtx.value.destination);\r\n\r\n    analyzer.value.smoothingTimeConstant = 0.9;\r\n    analyzer.value.fftSize = 32;\r\n\r\n    animate();\r\n  }\r\n};\r\n\r\nonMounted(async () => {\r\n  setAnalyzer();\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n.audio-canvas {\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n</style>\r\n","import script from \"./AudioAnalyzer.vue?vue&type=script&lang=ts&setup=true\"\nexport * from \"./AudioAnalyzer.vue?vue&type=script&lang=ts&setup=true\"\n\nimport \"./AudioAnalyzer.vue?vue&type=style&index=0&id=215725bb&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-215725bb\"]])\n\nexport default __exports__","import { defineComponent as _defineComponent } from 'vue'\nimport { createElementVNode as _createElementVNode, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, normalizeStyle as _normalizeStyle, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-0a3b37a4\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", { id: \"waveform\" }, null, -1))\nconst _hoisted_2 = [\"src\"]\n\nimport { onMounted, PropType, ref, watch } from \"vue\";\r\nimport ItemDialog from \"@/models/ItemDialog\";\r\nimport fileSystem from \"@/context/fileSystemController\";\r\n\r\nimport AudioAnalyzer from \"@/components/apps/audioItem/AudioAnalyzer.vue\";\r\nimport { useDynamicIslandStore } from \"@/stores/dynamicIslandStore\";\r\nimport { DynamicIslandAudioItem } from \"@/models/DynamicIslandItem\";\r\n\r\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'AudioPlayer',\n  props: {\r\n  itemDialog: Object as PropType<ItemDialog>,\r\n  height: { type: Number, required: true },\r\n},\n  setup(__props) {\n\r\nconst props = __props;\r\n\r\nconst dynamicIslandStore = useDynamicIslandStore();\r\n\r\nconst audioRef = ref<HTMLAudioElement>();\r\n\r\nconst audioSource = ref();\r\n\r\nwatch(\r\n  () => props.itemDialog?.isCollapsed,\r\n  async function (newValue: boolean | undefined, oldValue: boolean | undefined) {\r\n    if (newValue) {\r\n      //SET DYNAMIC ISLAND\r\n      const dynamicIslandItem: DynamicIslandAudioItem = {\r\n        componentPath: \"audioItem/AudioWidget.vue\",\r\n        itemDialogGuid: props.itemDialog?.guid || \"\",\r\n        audioElement: audioRef.value as HTMLAudioElement,\r\n      };\r\n      dynamicIslandStore.addDynamicIslandItem(dynamicIslandItem);\r\n    } else {\r\n      //CLOSE DYNAMIC ISLAND if any\r\n      dynamicIslandStore.removeDynamicIslandItem(props.itemDialog?.guid || \"\");\r\n    }\r\n  },\r\n);\r\n\r\nonMounted(async () => {\r\n  if (props.itemDialog?.path) {\r\n    const audioData = await fileSystem.readFile(props.itemDialog?.path);\r\n    audioSource.value = audioData;\r\n  }\r\n});\r\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"div\", {\n    style: _normalizeStyle([`height: ${__props.height}px; width: calc(100% -4px); `, {\"position\":\"relative\"}])\n  }, [\n    _hoisted_1,\n    _createElementVNode(\"div\", {\n      style: _normalizeStyle(`height: ${__props.height - 80}px; padding: calc(var(--margin)*2) `)\n    }, [\n      (audioSource.value)\n        ? (_openBlock(), _createBlock(AudioAnalyzer, {\n            key: 0,\n            audioElement: audioRef.value\n          }, null, 8, [\"audioElement\"]))\n        : _createCommentVNode(\"\", true)\n    ], 4),\n    _createElementVNode(\"audio\", {\n      autoplay: \"\",\n      class: \"audio-controls\",\n      id: \"audio\",\n      controls: \"\",\n      ref_key: \"audioRef\",\n      ref: audioRef,\n      src: audioSource.value\n    }, null, 8, _hoisted_2)\n  ], 4))\n}\n}\n\n})","<template>\r\n  <div :style=\"`height: ${height}px; width: calc(100% -4px); `\" style=\"position: relative\">\r\n    <div id=\"waveform\"></div>\r\n    <div :style=\"`height: ${height - 80}px; padding: calc(var(--margin)*2) `\">\r\n      <AudioAnalyzer v-if=\"audioSource\" :audioElement=\"audioRef\" />\r\n    </div>\r\n    <audio autoplay class=\"audio-controls\" id=\"audio\" controls ref=\"audioRef\" :src=\"audioSource\"></audio>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\" setup>\r\nimport { onMounted, PropType, ref, watch } from \"vue\";\r\nimport ItemDialog from \"@/models/ItemDialog\";\r\nimport fileSystem from \"@/context/fileSystemController\";\r\n\r\nimport AudioAnalyzer from \"@/components/apps/audioItem/AudioAnalyzer.vue\";\r\nimport { useDynamicIslandStore } from \"@/stores/dynamicIslandStore\";\r\nimport { DynamicIslandAudioItem } from \"@/models/DynamicIslandItem\";\r\n\r\nconst props = defineProps({\r\n  itemDialog: Object as PropType<ItemDialog>,\r\n  height: { type: Number, required: true },\r\n});\r\n\r\nconst dynamicIslandStore = useDynamicIslandStore();\r\n\r\nconst audioRef = ref<HTMLAudioElement>();\r\n\r\nconst audioSource = ref();\r\n\r\nwatch(\r\n  () => props.itemDialog?.isCollapsed,\r\n  async function (newValue: boolean | undefined, oldValue: boolean | undefined) {\r\n    if (newValue) {\r\n      //SET DYNAMIC ISLAND\r\n      const dynamicIslandItem: DynamicIslandAudioItem = {\r\n        componentPath: \"audioItem/AudioWidget.vue\",\r\n        itemDialogGuid: props.itemDialog?.guid || \"\",\r\n        audioElement: audioRef.value as HTMLAudioElement,\r\n      };\r\n      dynamicIslandStore.addDynamicIslandItem(dynamicIslandItem);\r\n    } else {\r\n      //CLOSE DYNAMIC ISLAND if any\r\n      dynamicIslandStore.removeDynamicIslandItem(props.itemDialog?.guid || \"\");\r\n    }\r\n  },\r\n);\r\n\r\nonMounted(async () => {\r\n  if (props.itemDialog?.path) {\r\n    const audioData = await fileSystem.readFile(props.itemDialog?.path);\r\n    audioSource.value = audioData;\r\n  }\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n.audio-controls {\r\n  position: absolute;\r\n  bottom: calc(var(--margin) * 2);\r\n  width: calc(100% - calc(var(--margin) * 4));\r\n  left: 0px;\r\n  margin: 0px calc(var(--margin) * 2);\r\n}\r\n</style>\r\n","import script from \"./AudioPlayer.vue?vue&type=script&lang=ts&setup=true\"\nexport * from \"./AudioPlayer.vue?vue&type=script&lang=ts&setup=true\"\n\nimport \"./AudioPlayer.vue?vue&type=style&index=0&id=0a3b37a4&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-0a3b37a4\"]])\n\nexport default __exports__"],"names":["_defineComponent","__name","props","audioElement","Object","setup","__props","canvasRef","ref","analyzer","audioCtx","window","AudioContext","animate","value","bufferLength","frequencyBinCount","dataArray","Uint8Array","ctx","getContext","clearRect","width","height","getByteFrequencyData","drawVisualizer","requestAnimationFrame","canvas","style","getComputedStyle","document","body","barHeight","fillStyle","getPropertyValue","barWidth","firstX","secondX","fixDpi","maxDataArrayValue","i","roundRect","dpi","devicePixelRatio","slice","setAttribute","toString","x","y","radius","color","beginPath","moveTo","arcTo","closePath","fill","setAnalyzer","mediaElement","createMediaElementSource","createAnalyser","connect","destination","smoothingTimeConstant","fftSize","onMounted","async","_ctx","_cache","_openBlock","_createElementBlock","id","ref_key","class","__exports__","_withScopeId","n","_pushScopeId","_popScopeId","_hoisted_1","_createElementVNode","_hoisted_2","itemDialog","type","Number","required","dynamicIslandStore","useDynamicIslandStore","audioRef","audioSource","watch","isCollapsed","newValue","oldValue","dynamicIslandItem","componentPath","itemDialogGuid","guid","addDynamicIslandItem","removeDynamicIslandItem","path","audioData","fileSystem","readFile","_normalizeStyle","_createBlock","AudioAnalyzer","key","_createCommentVNode","autoplay","controls","src"],"sourceRoot":""}