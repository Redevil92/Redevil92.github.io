{"version":3,"file":"js/8029.9120d349.js","mappings":"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","sources":["webpack://my-portfolio/./node_modules/core-js/internals/an-instance.js","webpack://my-portfolio/./node_modules/core-js/internals/dom-exception-constants.js","webpack://my-portfolio/./node_modules/core-js/modules/web.dom-exception.stack.js","webpack://my-portfolio/./src/hooks/useBase64Handler.ts","webpack://my-portfolio/./node_modules/vue-loader/dist/templateLoader.js","webpack://my-portfolio/./node_modules/fflate/esm/browser.js","webpack://my-portfolio/./node_modules/vue-loader/dist/index.js","webpack://my-portfolio/./src/components/apps/compressionItem/CompressionItem.vue","webpack://my-portfolio/./src/utils/byteConversionUtils.ts","webpack://my-portfolio/./src/utils/dateAndTimeConversionUtils.ts","webpack://my-portfolio/./src/components/apps/folderItem/FolderItemsList.vue"],"sourcesContent":["var global = require('../internals/global');\nvar isPrototypeOf = require('../internals/object-is-prototype-of');\n\nvar TypeError = global.TypeError;\n\nmodule.exports = function (it, Prototype) {\n  if (isPrototypeOf(Prototype, it)) return it;\n  throw TypeError('Incorrect invocation');\n};\n","module.exports = {\n  IndexSizeError: { s: 'INDEX_SIZE_ERR', c: 1, m: 1 },\n  DOMStringSizeError: { s: 'DOMSTRING_SIZE_ERR', c: 2, m: 0 },\n  HierarchyRequestError: { s: 'HIERARCHY_REQUEST_ERR', c: 3, m: 1 },\n  WrongDocumentError: { s: 'WRONG_DOCUMENT_ERR', c: 4, m: 1 },\n  InvalidCharacterError: { s: 'INVALID_CHARACTER_ERR', c: 5, m: 1 },\n  NoDataAllowedError: { s: 'NO_DATA_ALLOWED_ERR', c: 6, m: 0 },\n  NoModificationAllowedError: { s: 'NO_MODIFICATION_ALLOWED_ERR', c: 7, m: 1 },\n  NotFoundError: { s: 'NOT_FOUND_ERR', c: 8, m: 1 },\n  NotSupportedError: { s: 'NOT_SUPPORTED_ERR', c: 9, m: 1 },\n  InUseAttributeError: { s: 'INUSE_ATTRIBUTE_ERR', c: 10, m: 1 },\n  InvalidStateError: { s: 'INVALID_STATE_ERR', c: 11, m: 1 },\n  SyntaxError: { s: 'SYNTAX_ERR', c: 12, m: 1 },\n  InvalidModificationError: { s: 'INVALID_MODIFICATION_ERR', c: 13, m: 1 },\n  NamespaceError: { s: 'NAMESPACE_ERR', c: 14, m: 1 },\n  InvalidAccessError: { s: 'INVALID_ACCESS_ERR', c: 15, m: 1 },\n  ValidationError: { s: 'VALIDATION_ERR', c: 16, m: 0 },\n  TypeMismatchError: { s: 'TYPE_MISMATCH_ERR', c: 17, m: 1 },\n  SecurityError: { s: 'SECURITY_ERR', c: 18, m: 1 },\n  NetworkError: { s: 'NETWORK_ERR', c: 19, m: 1 },\n  AbortError: { s: 'ABORT_ERR', c: 20, m: 1 },\n  URLMismatchError: { s: 'URL_MISMATCH_ERR', c: 21, m: 1 },\n  QuotaExceededError: { s: 'QUOTA_EXCEEDED_ERR', c: 22, m: 1 },\n  TimeoutError: { s: 'TIMEOUT_ERR', c: 23, m: 1 },\n  InvalidNodeTypeError: { s: 'INVALID_NODE_TYPE_ERR', c: 24, m: 1 },\n  DataCloneError: { s: 'DATA_CLONE_ERR', c: 25, m: 1 }\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar getBuiltIn = require('../internals/get-built-in');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\nvar defineProperty = require('../internals/object-define-property').f;\nvar hasOwn = require('../internals/has-own-property');\nvar anInstance = require('../internals/an-instance');\nvar inheritIfRequired = require('../internals/inherit-if-required');\nvar normalizeStringArgument = require('../internals/normalize-string-argument');\nvar DOMExceptionConstants = require('../internals/dom-exception-constants');\nvar clearErrorStack = require('../internals/clear-error-stack');\nvar IS_PURE = require('../internals/is-pure');\n\nvar DOM_EXCEPTION = 'DOMException';\nvar Error = getBuiltIn('Error');\nvar NativeDOMException = getBuiltIn(DOM_EXCEPTION);\n\nvar $DOMException = function DOMException() {\n  anInstance(this, DOMExceptionPrototype);\n  var argumentsLength = arguments.length;\n  var message = normalizeStringArgument(argumentsLength < 1 ? undefined : arguments[0]);\n  var name = normalizeStringArgument(argumentsLength < 2 ? undefined : arguments[1], 'Error');\n  var that = new NativeDOMException(message, name);\n  var error = Error(message);\n  error.name = DOM_EXCEPTION;\n  defineProperty(that, 'stack', createPropertyDescriptor(1, clearErrorStack(error.stack, 1)));\n  inheritIfRequired(that, this, $DOMException);\n  return that;\n};\n\nvar DOMExceptionPrototype = $DOMException.prototype = NativeDOMException.prototype;\n\nvar ERROR_HAS_STACK = 'stack' in Error(DOM_EXCEPTION);\nvar DOM_EXCEPTION_HAS_STACK = 'stack' in new NativeDOMException(1, 2);\nvar FORCED_CONSTRUCTOR = ERROR_HAS_STACK && !DOM_EXCEPTION_HAS_STACK;\n\n// `DOMException` constructor patch for `.stack` where it's required\n// https://webidl.spec.whatwg.org/#es-DOMException-specialness\n$({ global: true, forced: IS_PURE || FORCED_CONSTRUCTOR }, { // TODO: fix export logic\n  DOMException: FORCED_CONSTRUCTOR ? $DOMException : NativeDOMException\n});\n\nvar PolyfilledDOMException = getBuiltIn(DOM_EXCEPTION);\nvar PolyfilledDOMExceptionPrototype = PolyfilledDOMException.prototype;\n\nif (PolyfilledDOMExceptionPrototype.constructor !== PolyfilledDOMException) {\n  if (!IS_PURE) {\n    defineProperty(PolyfilledDOMExceptionPrototype, 'constructor', createPropertyDescriptor(1, PolyfilledDOMException));\n  }\n\n  for (var key in DOMExceptionConstants) if (hasOwn(DOMExceptionConstants, key)) {\n    var constant = DOMExceptionConstants[key];\n    var constantName = constant.s;\n    if (!hasOwn(PolyfilledDOMException, constantName)) {\n      defineProperty(PolyfilledDOMException, constantName, createPropertyDescriptor(6, constant.c));\n    }\n  }\n}\n","export default function useBase64Handler() {\r\n  const b64ToText = (base64Data: string, shouldRemoveDataUri = false): string => {\r\n    const textToDecrypt = shouldRemoveDataUri ? removeDataUri(base64Data) : base64Data;\r\n    return decodeURIComponent(escape(window.atob(textToDecrypt)));\r\n  };\r\n\r\n  const utf8ToB64 = (str: string) => {\r\n    return window.btoa(unescape(encodeURIComponent(str)));\r\n  };\r\n\r\n  const removeDataUri = (str: string) => {\r\n    return str.substr(str.indexOf(\",\") + 1);\r\n  };\r\n\r\n  const isBase64 = (str: string) => {\r\n    const base64regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\r\n    return base64regex.test(str);\r\n  };\r\n\r\n  const uint8ArrayToBase64 = (uint8Array: Uint8Array) => {\r\n    let binary = \"\";\r\n    const len = uint8Array.byteLength;\r\n    for (let i = 0; i < len; i++) {\r\n      binary += String.fromCharCode(uint8Array[i]);\r\n    }\r\n    return window.btoa(binary);\r\n  };\r\n\r\n  return {\r\n    b64ToText,\r\n    utf8ToB64,\r\n    removeDataUri,\r\n    isBase64,\r\n    uint8ArrayToBase64,\r\n  };\r\n}\r\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, normalizeStyle as _normalizeStyle, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_FolderItemsList = _resolveComponent(\"FolderItemsList\")!\n\n  return (_openBlock(), _createElementBlock(\"div\", {\n    style: _normalizeStyle(`height: ${_ctx.height - 14}px; width: calc(100% -4px); `)\n  }, [\n    _createVNode(_component_FolderItemsList, {\n      itemsList: _ctx.items,\n      canRename: false,\n      isFocused: _ctx.itemDialog.isFocused,\n      onOnDoubleClick: _ctx.doubleClickHandler,\n      onOnRightClick: _ctx.rightClickItemHandler\n    }, null, 8, [\"itemsList\", \"isFocused\", \"onOnDoubleClick\", \"onOnRightClick\"])\n  ], 4))\n}","// DEFLATE is a complex format; to read this code, you should probably check the RFC first:\n// https://tools.ietf.org/html/rfc1951\n// You may also wish to take a look at the guide I made about this program:\n// https://gist.github.com/101arrowz/253f31eb5abc3d9275ab943003ffecad\n// Some of the following code is similar to that of UZIP.js:\n// https://github.com/photopea/UZIP.js\n// However, the vast majority of the codebase has diverged from UZIP.js to increase performance and reduce bundle size.\n// Sometimes 0 will appear where -1 would be more appropriate. This is because using a uint\n// is better for memory in most engines (I *think*).\nvar ch2 = {};\nvar wk = (function (c, id, msg, transfer, cb) {\n    var w = new Worker(ch2[id] || (ch2[id] = URL.createObjectURL(new Blob([\n        c + ';addEventListener(\"error\",function(e){e=e.error;postMessage({$e$:[e.message,e.code,e.stack]})})'\n    ], { type: 'text/javascript' }))));\n    w.onmessage = function (e) {\n        var d = e.data, ed = d.$e$;\n        if (ed) {\n            var err = new Error(ed[0]);\n            err['code'] = ed[1];\n            err.stack = ed[2];\n            cb(err, null);\n        }\n        else\n            cb(null, d);\n    };\n    w.postMessage(msg, transfer);\n    return w;\n});\n\n// aliases for shorter compressed code (most minifers don't do this)\nvar u8 = Uint8Array, u16 = Uint16Array, u32 = Uint32Array;\n// fixed length extra bits\nvar fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, /* unused */ 0, 0, /* impossible */ 0]);\n// fixed distance extra bits\n// see fleb note\nvar fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, /* unused */ 0, 0]);\n// code length index map\nvar clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n// get base, reverse index map from extra bits\nvar freb = function (eb, start) {\n    var b = new u16(31);\n    for (var i = 0; i < 31; ++i) {\n        b[i] = start += 1 << eb[i - 1];\n    }\n    // numbers here are at max 18 bits\n    var r = new u32(b[30]);\n    for (var i = 1; i < 30; ++i) {\n        for (var j = b[i]; j < b[i + 1]; ++j) {\n            r[j] = ((j - b[i]) << 5) | i;\n        }\n    }\n    return [b, r];\n};\nvar _a = freb(fleb, 2), fl = _a[0], revfl = _a[1];\n// we can ignore the fact that the other numbers are wrong; they never happen anyway\nfl[28] = 258, revfl[258] = 28;\nvar _b = freb(fdeb, 0), fd = _b[0], revfd = _b[1];\n// map of value to reverse (assuming 16 bits)\nvar rev = new u16(32768);\nfor (var i = 0; i < 32768; ++i) {\n    // reverse table algorithm from SO\n    var x = ((i & 0xAAAA) >>> 1) | ((i & 0x5555) << 1);\n    x = ((x & 0xCCCC) >>> 2) | ((x & 0x3333) << 2);\n    x = ((x & 0xF0F0) >>> 4) | ((x & 0x0F0F) << 4);\n    rev[i] = (((x & 0xFF00) >>> 8) | ((x & 0x00FF) << 8)) >>> 1;\n}\n// create huffman tree from u8 \"map\": index -> code length for code index\n// mb (max bits) must be at most 15\n// TODO: optimize/split up?\nvar hMap = (function (cd, mb, r) {\n    var s = cd.length;\n    // index\n    var i = 0;\n    // u16 \"map\": index -> # of codes with bit length = index\n    var l = new u16(mb);\n    // length of cd must be 288 (total # of codes)\n    for (; i < s; ++i) {\n        if (cd[i])\n            ++l[cd[i] - 1];\n    }\n    // u16 \"map\": index -> minimum code for bit length = index\n    var le = new u16(mb);\n    for (i = 0; i < mb; ++i) {\n        le[i] = (le[i - 1] + l[i - 1]) << 1;\n    }\n    var co;\n    if (r) {\n        // u16 \"map\": index -> number of actual bits, symbol for code\n        co = new u16(1 << mb);\n        // bits to remove for reverser\n        var rvb = 15 - mb;\n        for (i = 0; i < s; ++i) {\n            // ignore 0 lengths\n            if (cd[i]) {\n                // num encoding both symbol and bits read\n                var sv = (i << 4) | cd[i];\n                // free bits\n                var r_1 = mb - cd[i];\n                // start value\n                var v = le[cd[i] - 1]++ << r_1;\n                // m is end value\n                for (var m = v | ((1 << r_1) - 1); v <= m; ++v) {\n                    // every 16 bit value starting with the code yields the same result\n                    co[rev[v] >>> rvb] = sv;\n                }\n            }\n        }\n    }\n    else {\n        co = new u16(s);\n        for (i = 0; i < s; ++i) {\n            if (cd[i]) {\n                co[i] = rev[le[cd[i] - 1]++] >>> (15 - cd[i]);\n            }\n        }\n    }\n    return co;\n});\n// fixed length tree\nvar flt = new u8(288);\nfor (var i = 0; i < 144; ++i)\n    flt[i] = 8;\nfor (var i = 144; i < 256; ++i)\n    flt[i] = 9;\nfor (var i = 256; i < 280; ++i)\n    flt[i] = 7;\nfor (var i = 280; i < 288; ++i)\n    flt[i] = 8;\n// fixed distance tree\nvar fdt = new u8(32);\nfor (var i = 0; i < 32; ++i)\n    fdt[i] = 5;\n// fixed length map\nvar flm = /*#__PURE__*/ hMap(flt, 9, 0), flrm = /*#__PURE__*/ hMap(flt, 9, 1);\n// fixed distance map\nvar fdm = /*#__PURE__*/ hMap(fdt, 5, 0), fdrm = /*#__PURE__*/ hMap(fdt, 5, 1);\n// find max of array\nvar max = function (a) {\n    var m = a[0];\n    for (var i = 1; i < a.length; ++i) {\n        if (a[i] > m)\n            m = a[i];\n    }\n    return m;\n};\n// read d, starting at bit p and mask with m\nvar bits = function (d, p, m) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8)) >> (p & 7)) & m;\n};\n// read d, starting at bit p continuing for at least 16 bits\nvar bits16 = function (d, p) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8) | (d[o + 2] << 16)) >> (p & 7));\n};\n// get end of byte\nvar shft = function (p) { return ((p + 7) / 8) | 0; };\n// typed array slice - allows garbage collector to free original reference,\n// while being more compatible than .slice\nvar slc = function (v, s, e) {\n    if (s == null || s < 0)\n        s = 0;\n    if (e == null || e > v.length)\n        e = v.length;\n    // can't use .constructor in case user-supplied\n    var n = new (v.BYTES_PER_ELEMENT == 2 ? u16 : v.BYTES_PER_ELEMENT == 4 ? u32 : u8)(e - s);\n    n.set(v.subarray(s, e));\n    return n;\n};\n/**\n * Codes for errors generated within this library\n */\nexport var FlateErrorCode = {\n    UnexpectedEOF: 0,\n    InvalidBlockType: 1,\n    InvalidLengthLiteral: 2,\n    InvalidDistance: 3,\n    StreamFinished: 4,\n    NoStreamHandler: 5,\n    InvalidHeader: 6,\n    NoCallback: 7,\n    InvalidUTF8: 8,\n    ExtraFieldTooLong: 9,\n    InvalidDate: 10,\n    FilenameTooLong: 11,\n    StreamFinishing: 12,\n    InvalidZipData: 13,\n    UnknownCompressionMethod: 14\n};\n// error codes\nvar ec = [\n    'unexpected EOF',\n    'invalid block type',\n    'invalid length/literal',\n    'invalid distance',\n    'stream finished',\n    'no stream handler',\n    ,\n    'no callback',\n    'invalid UTF-8 data',\n    'extra field too long',\n    'date not in range 1980-2099',\n    'filename too long',\n    'stream finishing',\n    'invalid zip data'\n    // determined by unknown compression method\n];\n;\nvar err = function (ind, msg, nt) {\n    var e = new Error(msg || ec[ind]);\n    e.code = ind;\n    if (Error.captureStackTrace)\n        Error.captureStackTrace(e, err);\n    if (!nt)\n        throw e;\n    return e;\n};\n// expands raw DEFLATE data\nvar inflt = function (dat, buf, st) {\n    // source length\n    var sl = dat.length;\n    if (!sl || (st && st.f && !st.l))\n        return buf || new u8(0);\n    // have to estimate size\n    var noBuf = !buf || st;\n    // no state\n    var noSt = !st || st.i;\n    if (!st)\n        st = {};\n    // Assumes roughly 33% compression ratio average\n    if (!buf)\n        buf = new u8(sl * 3);\n    // ensure buffer can fit at least l elements\n    var cbuf = function (l) {\n        var bl = buf.length;\n        // need to increase size to fit\n        if (l > bl) {\n            // Double or set to necessary, whichever is greater\n            var nbuf = new u8(Math.max(bl * 2, l));\n            nbuf.set(buf);\n            buf = nbuf;\n        }\n    };\n    //  last chunk         bitpos           bytes\n    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;\n    // total bits\n    var tbts = sl * 8;\n    do {\n        if (!lm) {\n            // BFINAL - this is only 1 when last chunk is next\n            final = bits(dat, pos, 1);\n            // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman\n            var type = bits(dat, pos + 1, 3);\n            pos += 3;\n            if (!type) {\n                // go to end of byte boundary\n                var s = shft(pos) + 4, l = dat[s - 4] | (dat[s - 3] << 8), t = s + l;\n                if (t > sl) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                // ensure size\n                if (noBuf)\n                    cbuf(bt + l);\n                // Copy over uncompressed data\n                buf.set(dat.subarray(s, t), bt);\n                // Get new bitpos, update byte count\n                st.b = bt += l, st.p = pos = t * 8, st.f = final;\n                continue;\n            }\n            else if (type == 1)\n                lm = flrm, dm = fdrm, lbt = 9, dbt = 5;\n            else if (type == 2) {\n                //  literal                            lengths\n                var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;\n                var tl = hLit + bits(dat, pos + 5, 31) + 1;\n                pos += 14;\n                // length+distance tree\n                var ldt = new u8(tl);\n                // code length tree\n                var clt = new u8(19);\n                for (var i = 0; i < hcLen; ++i) {\n                    // use index map to get real code\n                    clt[clim[i]] = bits(dat, pos + i * 3, 7);\n                }\n                pos += hcLen * 3;\n                // code lengths bits\n                var clb = max(clt), clbmsk = (1 << clb) - 1;\n                // code lengths map\n                var clm = hMap(clt, clb, 1);\n                for (var i = 0; i < tl;) {\n                    var r = clm[bits(dat, pos, clbmsk)];\n                    // bits read\n                    pos += r & 15;\n                    // symbol\n                    var s = r >>> 4;\n                    // code length to copy\n                    if (s < 16) {\n                        ldt[i++] = s;\n                    }\n                    else {\n                        //  copy   count\n                        var c = 0, n = 0;\n                        if (s == 16)\n                            n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];\n                        else if (s == 17)\n                            n = 3 + bits(dat, pos, 7), pos += 3;\n                        else if (s == 18)\n                            n = 11 + bits(dat, pos, 127), pos += 7;\n                        while (n--)\n                            ldt[i++] = c;\n                    }\n                }\n                //    length tree                 distance tree\n                var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);\n                // max length bits\n                lbt = max(lt);\n                // max dist bits\n                dbt = max(dt);\n                lm = hMap(lt, lbt, 1);\n                dm = hMap(dt, dbt, 1);\n            }\n            else\n                err(1);\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n        }\n        // Make sure the buffer can hold this + the largest possible addition\n        // Maximum chunk size (practically, theoretically infinite) is 2^17;\n        if (noBuf)\n            cbuf(bt + 131072);\n        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;\n        var lpos = pos;\n        for (;; lpos = pos) {\n            // bits read, code\n            var c = lm[bits16(dat, pos) & lms], sym = c >>> 4;\n            pos += c & 15;\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n            if (!c)\n                err(2);\n            if (sym < 256)\n                buf[bt++] = sym;\n            else if (sym == 256) {\n                lpos = pos, lm = null;\n                break;\n            }\n            else {\n                var add = sym - 254;\n                // no extra bits needed if less\n                if (sym > 264) {\n                    // index\n                    var i = sym - 257, b = fleb[i];\n                    add = bits(dat, pos, (1 << b) - 1) + fl[i];\n                    pos += b;\n                }\n                // dist\n                var d = dm[bits16(dat, pos) & dms], dsym = d >>> 4;\n                if (!d)\n                    err(3);\n                pos += d & 15;\n                var dt = fd[dsym];\n                if (dsym > 3) {\n                    var b = fdeb[dsym];\n                    dt += bits16(dat, pos) & ((1 << b) - 1), pos += b;\n                }\n                if (pos > tbts) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                if (noBuf)\n                    cbuf(bt + 131072);\n                var end = bt + add;\n                for (; bt < end; bt += 4) {\n                    buf[bt] = buf[bt - dt];\n                    buf[bt + 1] = buf[bt + 1 - dt];\n                    buf[bt + 2] = buf[bt + 2 - dt];\n                    buf[bt + 3] = buf[bt + 3 - dt];\n                }\n                bt = end;\n            }\n        }\n        st.l = lm, st.p = lpos, st.b = bt, st.f = final;\n        if (lm)\n            final = 1, st.m = lbt, st.d = dm, st.n = dbt;\n    } while (!final);\n    return bt == buf.length ? buf : slc(buf, 0, bt);\n};\n// starting at p, write the minimum number of bits that can hold v to d\nvar wbits = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >>> 8;\n};\n// starting at p, write the minimum number of bits (>8) that can hold v to d\nvar wbits16 = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >>> 8;\n    d[o + 2] |= v >>> 16;\n};\n// creates code lengths from a frequency table\nvar hTree = function (d, mb) {\n    // Need extra info to make a tree\n    var t = [];\n    for (var i = 0; i < d.length; ++i) {\n        if (d[i])\n            t.push({ s: i, f: d[i] });\n    }\n    var s = t.length;\n    var t2 = t.slice();\n    if (!s)\n        return [et, 0];\n    if (s == 1) {\n        var v = new u8(t[0].s + 1);\n        v[t[0].s] = 1;\n        return [v, 1];\n    }\n    t.sort(function (a, b) { return a.f - b.f; });\n    // after i2 reaches last ind, will be stopped\n    // freq must be greater than largest possible number of symbols\n    t.push({ s: -1, f: 25001 });\n    var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;\n    t[0] = { s: -1, f: l.f + r.f, l: l, r: r };\n    // efficient algorithm from UZIP.js\n    // i0 is lookbehind, i2 is lookahead - after processing two low-freq\n    // symbols that combined have high freq, will start processing i2 (high-freq,\n    // non-composite) symbols instead\n    // see https://reddit.com/r/photopea/comments/ikekht/uzipjs_questions/\n    while (i1 != s - 1) {\n        l = t[t[i0].f < t[i2].f ? i0++ : i2++];\n        r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];\n        t[i1++] = { s: -1, f: l.f + r.f, l: l, r: r };\n    }\n    var maxSym = t2[0].s;\n    for (var i = 1; i < s; ++i) {\n        if (t2[i].s > maxSym)\n            maxSym = t2[i].s;\n    }\n    // code lengths\n    var tr = new u16(maxSym + 1);\n    // max bits in tree\n    var mbt = ln(t[i1 - 1], tr, 0);\n    if (mbt > mb) {\n        // more algorithms from UZIP.js\n        // TODO: find out how this code works (debt)\n        //  ind    debt\n        var i = 0, dt = 0;\n        //    left            cost\n        var lft = mbt - mb, cst = 1 << lft;\n        t2.sort(function (a, b) { return tr[b.s] - tr[a.s] || a.f - b.f; });\n        for (; i < s; ++i) {\n            var i2_1 = t2[i].s;\n            if (tr[i2_1] > mb) {\n                dt += cst - (1 << (mbt - tr[i2_1]));\n                tr[i2_1] = mb;\n            }\n            else\n                break;\n        }\n        dt >>>= lft;\n        while (dt > 0) {\n            var i2_2 = t2[i].s;\n            if (tr[i2_2] < mb)\n                dt -= 1 << (mb - tr[i2_2]++ - 1);\n            else\n                ++i;\n        }\n        for (; i >= 0 && dt; --i) {\n            var i2_3 = t2[i].s;\n            if (tr[i2_3] == mb) {\n                --tr[i2_3];\n                ++dt;\n            }\n        }\n        mbt = mb;\n    }\n    return [new u8(tr), mbt];\n};\n// get the max length and assign length codes\nvar ln = function (n, l, d) {\n    return n.s == -1\n        ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1))\n        : (l[n.s] = d);\n};\n// length codes generation\nvar lc = function (c) {\n    var s = c.length;\n    // Note that the semicolon was intentional\n    while (s && !c[--s])\n        ;\n    var cl = new u16(++s);\n    //  ind      num         streak\n    var cli = 0, cln = c[0], cls = 1;\n    var w = function (v) { cl[cli++] = v; };\n    for (var i = 1; i <= s; ++i) {\n        if (c[i] == cln && i != s)\n            ++cls;\n        else {\n            if (!cln && cls > 2) {\n                for (; cls > 138; cls -= 138)\n                    w(32754);\n                if (cls > 2) {\n                    w(cls > 10 ? ((cls - 11) << 5) | 28690 : ((cls - 3) << 5) | 12305);\n                    cls = 0;\n                }\n            }\n            else if (cls > 3) {\n                w(cln), --cls;\n                for (; cls > 6; cls -= 6)\n                    w(8304);\n                if (cls > 2)\n                    w(((cls - 3) << 5) | 8208), cls = 0;\n            }\n            while (cls--)\n                w(cln);\n            cls = 1;\n            cln = c[i];\n        }\n    }\n    return [cl.subarray(0, cli), s];\n};\n// calculate the length of output from tree, code lengths\nvar clen = function (cf, cl) {\n    var l = 0;\n    for (var i = 0; i < cl.length; ++i)\n        l += cf[i] * cl[i];\n    return l;\n};\n// writes a fixed block\n// returns the new bit pos\nvar wfblk = function (out, pos, dat) {\n    // no need to write 00 as type: TypedArray defaults to 0\n    var s = dat.length;\n    var o = shft(pos + 2);\n    out[o] = s & 255;\n    out[o + 1] = s >>> 8;\n    out[o + 2] = out[o] ^ 255;\n    out[o + 3] = out[o + 1] ^ 255;\n    for (var i = 0; i < s; ++i)\n        out[o + i + 4] = dat[i];\n    return (o + 4 + s) * 8;\n};\n// writes a block\nvar wblk = function (dat, out, final, syms, lf, df, eb, li, bs, bl, p) {\n    wbits(out, p++, final);\n    ++lf[256];\n    var _a = hTree(lf, 15), dlt = _a[0], mlb = _a[1];\n    var _b = hTree(df, 15), ddt = _b[0], mdb = _b[1];\n    var _c = lc(dlt), lclt = _c[0], nlc = _c[1];\n    var _d = lc(ddt), lcdt = _d[0], ndc = _d[1];\n    var lcfreq = new u16(19);\n    for (var i = 0; i < lclt.length; ++i)\n        lcfreq[lclt[i] & 31]++;\n    for (var i = 0; i < lcdt.length; ++i)\n        lcfreq[lcdt[i] & 31]++;\n    var _e = hTree(lcfreq, 7), lct = _e[0], mlcb = _e[1];\n    var nlcc = 19;\n    for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc)\n        ;\n    var flen = (bl + 5) << 3;\n    var ftlen = clen(lf, flt) + clen(df, fdt) + eb;\n    var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + (2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18]);\n    if (flen <= ftlen && flen <= dtlen)\n        return wfblk(out, p, dat.subarray(bs, bs + bl));\n    var lm, ll, dm, dl;\n    wbits(out, p, 1 + (dtlen < ftlen)), p += 2;\n    if (dtlen < ftlen) {\n        lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;\n        var llm = hMap(lct, mlcb, 0);\n        wbits(out, p, nlc - 257);\n        wbits(out, p + 5, ndc - 1);\n        wbits(out, p + 10, nlcc - 4);\n        p += 14;\n        for (var i = 0; i < nlcc; ++i)\n            wbits(out, p + 3 * i, lct[clim[i]]);\n        p += 3 * nlcc;\n        var lcts = [lclt, lcdt];\n        for (var it = 0; it < 2; ++it) {\n            var clct = lcts[it];\n            for (var i = 0; i < clct.length; ++i) {\n                var len = clct[i] & 31;\n                wbits(out, p, llm[len]), p += lct[len];\n                if (len > 15)\n                    wbits(out, p, (clct[i] >>> 5) & 127), p += clct[i] >>> 12;\n            }\n        }\n    }\n    else {\n        lm = flm, ll = flt, dm = fdm, dl = fdt;\n    }\n    for (var i = 0; i < li; ++i) {\n        if (syms[i] > 255) {\n            var len = (syms[i] >>> 18) & 31;\n            wbits16(out, p, lm[len + 257]), p += ll[len + 257];\n            if (len > 7)\n                wbits(out, p, (syms[i] >>> 23) & 31), p += fleb[len];\n            var dst = syms[i] & 31;\n            wbits16(out, p, dm[dst]), p += dl[dst];\n            if (dst > 3)\n                wbits16(out, p, (syms[i] >>> 5) & 8191), p += fdeb[dst];\n        }\n        else {\n            wbits16(out, p, lm[syms[i]]), p += ll[syms[i]];\n        }\n    }\n    wbits16(out, p, lm[256]);\n    return p + ll[256];\n};\n// deflate options (nice << 13) | chain\nvar deo = /*#__PURE__*/ new u32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);\n// empty\nvar et = /*#__PURE__*/ new u8(0);\n// compresses data into a raw DEFLATE buffer\nvar dflt = function (dat, lvl, plvl, pre, post, lst) {\n    var s = dat.length;\n    var o = new u8(pre + s + 5 * (1 + Math.ceil(s / 7000)) + post);\n    // writing to this writes to the output buffer\n    var w = o.subarray(pre, o.length - post);\n    var pos = 0;\n    if (!lvl || s < 8) {\n        for (var i = 0; i <= s; i += 65535) {\n            // end\n            var e = i + 65535;\n            if (e >= s) {\n                // write final block\n                w[pos >> 3] = lst;\n            }\n            pos = wfblk(w, pos + 1, dat.subarray(i, e));\n        }\n    }\n    else {\n        var opt = deo[lvl - 1];\n        var n = opt >>> 13, c = opt & 8191;\n        var msk_1 = (1 << plvl) - 1;\n        //    prev 2-byte val map    curr 2-byte val map\n        var prev = new u16(32768), head = new u16(msk_1 + 1);\n        var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;\n        var hsh = function (i) { return (dat[i] ^ (dat[i + 1] << bs1_1) ^ (dat[i + 2] << bs2_1)) & msk_1; };\n        // 24576 is an arbitrary number of maximum symbols per block\n        // 424 buffer for last block\n        var syms = new u32(25000);\n        // length/literal freq   distance freq\n        var lf = new u16(288), df = new u16(32);\n        //  l/lcnt  exbits  index  l/lind  waitdx  bitpos\n        var lc_1 = 0, eb = 0, i = 0, li = 0, wi = 0, bs = 0;\n        for (; i < s; ++i) {\n            // hash value\n            // deopt when i > s - 3 - at end, deopt acceptable\n            var hv = hsh(i);\n            // index mod 32768    previous index mod\n            var imod = i & 32767, pimod = head[hv];\n            prev[imod] = pimod;\n            head[hv] = imod;\n            // We always should modify head and prev, but only add symbols if\n            // this data is not yet processed (\"wait\" for wait index)\n            if (wi <= i) {\n                // bytes remaining\n                var rem = s - i;\n                if ((lc_1 > 7000 || li > 24576) && rem > 423) {\n                    pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);\n                    li = lc_1 = eb = 0, bs = i;\n                    for (var j = 0; j < 286; ++j)\n                        lf[j] = 0;\n                    for (var j = 0; j < 30; ++j)\n                        df[j] = 0;\n                }\n                //  len    dist   chain\n                var l = 2, d = 0, ch_1 = c, dif = (imod - pimod) & 32767;\n                if (rem > 2 && hv == hsh(i - dif)) {\n                    var maxn = Math.min(n, rem) - 1;\n                    var maxd = Math.min(32767, i);\n                    // max possible length\n                    // not capped at dif because decompressors implement \"rolling\" index population\n                    var ml = Math.min(258, rem);\n                    while (dif <= maxd && --ch_1 && imod != pimod) {\n                        if (dat[i + l] == dat[i + l - dif]) {\n                            var nl = 0;\n                            for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl)\n                                ;\n                            if (nl > l) {\n                                l = nl, d = dif;\n                                // break out early when we reach \"nice\" (we are satisfied enough)\n                                if (nl > maxn)\n                                    break;\n                                // now, find the rarest 2-byte sequence within this\n                                // length of literals and search for that instead.\n                                // Much faster than just using the start\n                                var mmd = Math.min(dif, nl - 2);\n                                var md = 0;\n                                for (var j = 0; j < mmd; ++j) {\n                                    var ti = (i - dif + j + 32768) & 32767;\n                                    var pti = prev[ti];\n                                    var cd = (ti - pti + 32768) & 32767;\n                                    if (cd > md)\n                                        md = cd, pimod = ti;\n                                }\n                            }\n                        }\n                        // check the previous match\n                        imod = pimod, pimod = prev[imod];\n                        dif += (imod - pimod + 32768) & 32767;\n                    }\n                }\n                // d will be nonzero only when a match was found\n                if (d) {\n                    // store both dist and len data in one Uint32\n                    // Make sure this is recognized as a len/dist with 28th bit (2^28)\n                    syms[li++] = 268435456 | (revfl[l] << 18) | revfd[d];\n                    var lin = revfl[l] & 31, din = revfd[d] & 31;\n                    eb += fleb[lin] + fdeb[din];\n                    ++lf[257 + lin];\n                    ++df[din];\n                    wi = i + l;\n                    ++lc_1;\n                }\n                else {\n                    syms[li++] = dat[i];\n                    ++lf[dat[i]];\n                }\n            }\n        }\n        pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);\n        // this is the easiest way to avoid needing to maintain state\n        if (!lst && pos & 7)\n            pos = wfblk(w, pos + 1, et);\n    }\n    return slc(o, 0, pre + shft(pos) + post);\n};\n// CRC32 table\nvar crct = /*#__PURE__*/ (function () {\n    var t = new Int32Array(256);\n    for (var i = 0; i < 256; ++i) {\n        var c = i, k = 9;\n        while (--k)\n            c = ((c & 1) && -306674912) ^ (c >>> 1);\n        t[i] = c;\n    }\n    return t;\n})();\n// CRC32\nvar crc = function () {\n    var c = -1;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var cr = c;\n            for (var i = 0; i < d.length; ++i)\n                cr = crct[(cr & 255) ^ d[i]] ^ (cr >>> 8);\n            c = cr;\n        },\n        d: function () { return ~c; }\n    };\n};\n// Alder32\nvar adler = function () {\n    var a = 1, b = 0;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var n = a, m = b;\n            var l = d.length | 0;\n            for (var i = 0; i != l;) {\n                var e = Math.min(i + 2655, l);\n                for (; i < e; ++i)\n                    m += n += d[i];\n                n = (n & 65535) + 15 * (n >> 16), m = (m & 65535) + 15 * (m >> 16);\n            }\n            a = n, b = m;\n        },\n        d: function () {\n            a %= 65521, b %= 65521;\n            return (a & 255) << 24 | (a >>> 8) << 16 | (b & 255) << 8 | (b >>> 8);\n        }\n    };\n};\n;\n// deflate with opts\nvar dopt = function (dat, opt, pre, post, st) {\n    return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : (12 + opt.mem), pre, post, !st);\n};\n// Walmart object spread\nvar mrg = function (a, b) {\n    var o = {};\n    for (var k in a)\n        o[k] = a[k];\n    for (var k in b)\n        o[k] = b[k];\n    return o;\n};\n// worker clone\n// This is possibly the craziest part of the entire codebase, despite how simple it may seem.\n// The only parameter to this function is a closure that returns an array of variables outside of the function scope.\n// We're going to try to figure out the variable names used in the closure as strings because that is crucial for workerization.\n// We will return an object mapping of true variable name to value (basically, the current scope as a JS object).\n// The reason we can't just use the original variable names is minifiers mangling the toplevel scope.\n// This took me three weeks to figure out how to do.\nvar wcln = function (fn, fnStr, td) {\n    var dt = fn();\n    var st = fn.toString();\n    var ks = st.slice(st.indexOf('[') + 1, st.lastIndexOf(']')).replace(/\\s+/g, '').split(',');\n    for (var i = 0; i < dt.length; ++i) {\n        var v = dt[i], k = ks[i];\n        if (typeof v == 'function') {\n            fnStr += ';' + k + '=';\n            var st_1 = v.toString();\n            if (v.prototype) {\n                // for global objects\n                if (st_1.indexOf('[native code]') != -1) {\n                    var spInd = st_1.indexOf(' ', 8) + 1;\n                    fnStr += st_1.slice(spInd, st_1.indexOf('(', spInd));\n                }\n                else {\n                    fnStr += st_1;\n                    for (var t in v.prototype)\n                        fnStr += ';' + k + '.prototype.' + t + '=' + v.prototype[t].toString();\n                }\n            }\n            else\n                fnStr += st_1;\n        }\n        else\n            td[k] = v;\n    }\n    return [fnStr, td];\n};\nvar ch = [];\n// clone bufs\nvar cbfs = function (v) {\n    var tl = [];\n    for (var k in v) {\n        if (v[k].buffer) {\n            tl.push((v[k] = new v[k].constructor(v[k])).buffer);\n        }\n    }\n    return tl;\n};\n// use a worker to execute code\nvar wrkr = function (fns, init, id, cb) {\n    var _a;\n    if (!ch[id]) {\n        var fnStr = '', td_1 = {}, m = fns.length - 1;\n        for (var i = 0; i < m; ++i)\n            _a = wcln(fns[i], fnStr, td_1), fnStr = _a[0], td_1 = _a[1];\n        ch[id] = wcln(fns[m], fnStr, td_1);\n    }\n    var td = mrg({}, ch[id][1]);\n    return wk(ch[id][0] + ';onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=' + init.toString() + '}', id, td, cbfs(td), cb);\n};\n// base async inflate fn\nvar bInflt = function () { return [u8, u16, u32, fleb, fdeb, clim, fl, fd, flrm, fdrm, rev, ec, hMap, max, bits, bits16, shft, slc, err, inflt, inflateSync, pbf, gu8]; };\nvar bDflt = function () { return [u8, u16, u32, fleb, fdeb, clim, revfl, revfd, flm, flt, fdm, fdt, rev, deo, et, hMap, wbits, wbits16, hTree, ln, lc, clen, wfblk, wblk, shft, slc, dflt, dopt, deflateSync, pbf]; };\n// gzip extra\nvar gze = function () { return [gzh, gzhl, wbytes, crc, crct]; };\n// gunzip extra\nvar guze = function () { return [gzs, gzl]; };\n// zlib extra\nvar zle = function () { return [zlh, wbytes, adler]; };\n// unzlib extra\nvar zule = function () { return [zlv]; };\n// post buf\nvar pbf = function (msg) { return postMessage(msg, [msg.buffer]); };\n// get u8\nvar gu8 = function (o) { return o && o.size && new u8(o.size); };\n// async helper\nvar cbify = function (dat, opts, fns, init, id, cb) {\n    var w = wrkr(fns, init, id, function (err, dat) {\n        w.terminate();\n        cb(err, dat);\n    });\n    w.postMessage([dat, opts], opts.consume ? [dat.buffer] : []);\n    return function () { w.terminate(); };\n};\n// auto stream\nvar astrm = function (strm) {\n    strm.ondata = function (dat, final) { return postMessage([dat, final], [dat.buffer]); };\n    return function (ev) { return strm.push(ev.data[0], ev.data[1]); };\n};\n// async stream attach\nvar astrmify = function (fns, strm, opts, init, id) {\n    var t;\n    var w = wrkr(fns, init, id, function (err, dat) {\n        if (err)\n            w.terminate(), strm.ondata.call(strm, err);\n        else {\n            if (dat[1])\n                w.terminate();\n            strm.ondata.call(strm, err, dat[0], dat[1]);\n        }\n    });\n    w.postMessage(opts);\n    strm.push = function (d, f) {\n        if (!strm.ondata)\n            err(5);\n        if (t)\n            strm.ondata(err(4, 0, 1), null, !!f);\n        w.postMessage([d, t = f], [d.buffer]);\n    };\n    strm.terminate = function () { w.terminate(); };\n};\n// read 2 bytes\nvar b2 = function (d, b) { return d[b] | (d[b + 1] << 8); };\n// read 4 bytes\nvar b4 = function (d, b) { return (d[b] | (d[b + 1] << 8) | (d[b + 2] << 16) | (d[b + 3] << 24)) >>> 0; };\nvar b8 = function (d, b) { return b4(d, b) + (b4(d, b + 4) * 4294967296); };\n// write bytes\nvar wbytes = function (d, b, v) {\n    for (; v; ++b)\n        d[b] = v, v >>>= 8;\n};\n// gzip header\nvar gzh = function (c, o) {\n    var fn = o.filename;\n    c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o.level < 2 ? 4 : o.level == 9 ? 2 : 0, c[9] = 3; // assume Unix\n    if (o.mtime != 0)\n        wbytes(c, 4, Math.floor(new Date(o.mtime || Date.now()) / 1000));\n    if (fn) {\n        c[3] = 8;\n        for (var i = 0; i <= fn.length; ++i)\n            c[i + 10] = fn.charCodeAt(i);\n    }\n};\n// gzip footer: -8 to -4 = CRC, -4 to -0 is length\n// gzip start\nvar gzs = function (d) {\n    if (d[0] != 31 || d[1] != 139 || d[2] != 8)\n        err(6, 'invalid gzip data');\n    var flg = d[3];\n    var st = 10;\n    if (flg & 4)\n        st += d[10] | (d[11] << 8) + 2;\n    for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++])\n        ;\n    return st + (flg & 2);\n};\n// gzip length\nvar gzl = function (d) {\n    var l = d.length;\n    return ((d[l - 4] | d[l - 3] << 8 | d[l - 2] << 16) | (d[l - 1] << 24)) >>> 0;\n};\n// gzip header length\nvar gzhl = function (o) { return 10 + ((o.filename && (o.filename.length + 1)) || 0); };\n// zlib header\nvar zlh = function (c, o) {\n    var lv = o.level, fl = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;\n    c[0] = 120, c[1] = (fl << 6) | (fl ? (32 - 2 * fl) : 1);\n};\n// zlib valid\nvar zlv = function (d) {\n    if ((d[0] & 15) != 8 || (d[0] >>> 4) > 7 || ((d[0] << 8 | d[1]) % 31))\n        err(6, 'invalid zlib data');\n    if (d[1] & 32)\n        err(6, 'invalid zlib data: preset dictionaries not supported');\n};\nfunction AsyncCmpStrm(opts, cb) {\n    if (!cb && typeof opts == 'function')\n        cb = opts, opts = {};\n    this.ondata = cb;\n    return opts;\n}\n// zlib footer: -4 to -0 is Adler32\n/**\n * Streaming DEFLATE compression\n */\nvar Deflate = /*#__PURE__*/ (function () {\n    function Deflate(opts, cb) {\n        if (!cb && typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        this.o = opts || {};\n    }\n    Deflate.prototype.p = function (c, f) {\n        this.ondata(dopt(c, this.o, 0, 0, !f), f);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Deflate.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        this.d = final;\n        this.p(chunk, final || false);\n    };\n    return Deflate;\n}());\nexport { Deflate };\n/**\n * Asynchronous streaming DEFLATE compression\n */\nvar AsyncDeflate = /*#__PURE__*/ (function () {\n    function AsyncDeflate(opts, cb) {\n        astrmify([\n            bDflt,\n            function () { return [astrm, Deflate]; }\n        ], this, AsyncCmpStrm.call(this, opts, cb), function (ev) {\n            var strm = new Deflate(ev.data);\n            onmessage = astrm(strm);\n        }, 6);\n    }\n    return AsyncDeflate;\n}());\nexport { AsyncDeflate };\nexport function deflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n    ], function (ev) { return pbf(deflateSync(ev.data[0], ev.data[1])); }, 0, cb);\n}\n/**\n * Compresses data with DEFLATE without any wrapper\n * @param data The data to compress\n * @param opts The compression options\n * @returns The deflated version of the data\n */\nexport function deflateSync(data, opts) {\n    return dopt(data, opts || {}, 0, 0);\n}\n/**\n * Streaming DEFLATE decompression\n */\nvar Inflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates an inflation stream\n     * @param cb The callback to call whenever data is inflated\n     */\n    function Inflate(cb) {\n        this.s = {};\n        this.p = new u8(0);\n        this.ondata = cb;\n    }\n    Inflate.prototype.e = function (c) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        var l = this.p.length;\n        var n = new u8(l + c.length);\n        n.set(this.p), n.set(c, l), this.p = n;\n    };\n    Inflate.prototype.c = function (final) {\n        this.d = this.s.i = final || false;\n        var bts = this.s.b;\n        var dt = inflt(this.p, this.o, this.s);\n        this.ondata(slc(dt, bts, this.s.b), this.d);\n        this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;\n        this.p = slc(this.p, (this.s.p / 8) | 0), this.s.p &= 7;\n    };\n    /**\n     * Pushes a chunk to be inflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the final chunk\n     */\n    Inflate.prototype.push = function (chunk, final) {\n        this.e(chunk), this.c(final);\n    };\n    return Inflate;\n}());\nexport { Inflate };\n/**\n * Asynchronous streaming DEFLATE decompression\n */\nvar AsyncInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous inflation stream\n     * @param cb The callback to call whenever data is deflated\n     */\n    function AsyncInflate(cb) {\n        this.ondata = cb;\n        astrmify([\n            bInflt,\n            function () { return [astrm, Inflate]; }\n        ], this, 0, function () {\n            var strm = new Inflate();\n            onmessage = astrm(strm);\n        }, 7);\n    }\n    return AsyncInflate;\n}());\nexport { AsyncInflate };\nexport function inflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt\n    ], function (ev) { return pbf(inflateSync(ev.data[0], gu8(ev.data[1]))); }, 1, cb);\n}\n/**\n * Expands DEFLATE data with no wrapper\n * @param data The data to decompress\n * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.\n * @returns The decompressed version of the data\n */\nexport function inflateSync(data, out) {\n    return inflt(data, out);\n}\n// before you yell at me for not just using extends, my reason is that TS inheritance is hard to workerize.\n/**\n * Streaming GZIP compression\n */\nvar Gzip = /*#__PURE__*/ (function () {\n    function Gzip(opts, cb) {\n        this.c = crc();\n        this.l = 0;\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gzip.prototype.push = function (chunk, final) {\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Gzip.prototype.p = function (c, f) {\n        this.c.p(c);\n        this.l += c.length;\n        var raw = dopt(c, this.o, this.v && gzhl(this.o), f && 8, !f);\n        if (this.v)\n            gzh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 8, this.c.d()), wbytes(raw, raw.length - 4, this.l);\n        this.ondata(raw, f);\n    };\n    return Gzip;\n}());\nexport { Gzip };\n/**\n * Asynchronous streaming GZIP compression\n */\nvar AsyncGzip = /*#__PURE__*/ (function () {\n    function AsyncGzip(opts, cb) {\n        astrmify([\n            bDflt,\n            gze,\n            function () { return [astrm, Deflate, Gzip]; }\n        ], this, AsyncCmpStrm.call(this, opts, cb), function (ev) {\n            var strm = new Gzip(ev.data);\n            onmessage = astrm(strm);\n        }, 8);\n    }\n    return AsyncGzip;\n}());\nexport { AsyncGzip };\nexport function gzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        gze,\n        function () { return [gzipSync]; }\n    ], function (ev) { return pbf(gzipSync(ev.data[0], ev.data[1])); }, 2, cb);\n}\n/**\n * Compresses data with GZIP\n * @param data The data to compress\n * @param opts The compression options\n * @returns The gzipped version of the data\n */\nexport function gzipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var c = crc(), l = data.length;\n    c.p(data);\n    var d = dopt(data, opts, gzhl(opts), 8), s = d.length;\n    return gzh(d, opts), wbytes(d, s - 8, c.d()), wbytes(d, s - 4, l), d;\n}\n/**\n * Streaming GZIP decompression\n */\nvar Gunzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates a GUNZIP stream\n     * @param cb The callback to call whenever data is inflated\n     */\n    function Gunzip(cb) {\n        this.v = 1;\n        Inflate.call(this, cb);\n    }\n    /**\n     * Pushes a chunk to be GUNZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gunzip.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        if (this.v) {\n            var s = this.p.length > 3 ? gzs(this.p) : 4;\n            if (s >= this.p.length && !final)\n                return;\n            this.p = this.p.subarray(s), this.v = 0;\n        }\n        if (final) {\n            if (this.p.length < 8)\n                err(6, 'invalid gzip data');\n            this.p = this.p.subarray(0, -8);\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n    };\n    return Gunzip;\n}());\nexport { Gunzip };\n/**\n * Asynchronous streaming GZIP decompression\n */\nvar AsyncGunzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous GUNZIP stream\n     * @param cb The callback to call whenever data is deflated\n     */\n    function AsyncGunzip(cb) {\n        this.ondata = cb;\n        astrmify([\n            bInflt,\n            guze,\n            function () { return [astrm, Inflate, Gunzip]; }\n        ], this, 0, function () {\n            var strm = new Gunzip();\n            onmessage = astrm(strm);\n        }, 9);\n    }\n    return AsyncGunzip;\n}());\nexport { AsyncGunzip };\nexport function gunzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        guze,\n        function () { return [gunzipSync]; }\n    ], function (ev) { return pbf(gunzipSync(ev.data[0])); }, 3, cb);\n}\n/**\n * Expands GZIP data\n * @param data The data to decompress\n * @param out Where to write the data. GZIP already encodes the output size, so providing this doesn't save memory.\n * @returns The decompressed version of the data\n */\nexport function gunzipSync(data, out) {\n    return inflt(data.subarray(gzs(data), -8), out || new u8(gzl(data)));\n}\n/**\n * Streaming Zlib compression\n */\nvar Zlib = /*#__PURE__*/ (function () {\n    function Zlib(opts, cb) {\n        this.c = adler();\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be zlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Zlib.prototype.push = function (chunk, final) {\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Zlib.prototype.p = function (c, f) {\n        this.c.p(c);\n        var raw = dopt(c, this.o, this.v && 2, f && 4, !f);\n        if (this.v)\n            zlh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 4, this.c.d());\n        this.ondata(raw, f);\n    };\n    return Zlib;\n}());\nexport { Zlib };\n/**\n * Asynchronous streaming Zlib compression\n */\nvar AsyncZlib = /*#__PURE__*/ (function () {\n    function AsyncZlib(opts, cb) {\n        astrmify([\n            bDflt,\n            zle,\n            function () { return [astrm, Deflate, Zlib]; }\n        ], this, AsyncCmpStrm.call(this, opts, cb), function (ev) {\n            var strm = new Zlib(ev.data);\n            onmessage = astrm(strm);\n        }, 10);\n    }\n    return AsyncZlib;\n}());\nexport { AsyncZlib };\nexport function zlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        zle,\n        function () { return [zlibSync]; }\n    ], function (ev) { return pbf(zlibSync(ev.data[0], ev.data[1])); }, 4, cb);\n}\n/**\n * Compress data with Zlib\n * @param data The data to compress\n * @param opts The compression options\n * @returns The zlib-compressed version of the data\n */\nexport function zlibSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var a = adler();\n    a.p(data);\n    var d = dopt(data, opts, 2, 4);\n    return zlh(d, opts), wbytes(d, d.length - 4, a.d()), d;\n}\n/**\n * Streaming Zlib decompression\n */\nvar Unzlib = /*#__PURE__*/ (function () {\n    /**\n     * Creates a Zlib decompression stream\n     * @param cb The callback to call whenever data is inflated\n     */\n    function Unzlib(cb) {\n        this.v = 1;\n        Inflate.call(this, cb);\n    }\n    /**\n     * Pushes a chunk to be unzlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzlib.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        if (this.v) {\n            if (this.p.length < 2 && !final)\n                return;\n            this.p = this.p.subarray(2), this.v = 0;\n        }\n        if (final) {\n            if (this.p.length < 4)\n                err(6, 'invalid zlib data');\n            this.p = this.p.subarray(0, -4);\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n    };\n    return Unzlib;\n}());\nexport { Unzlib };\n/**\n * Asynchronous streaming Zlib decompression\n */\nvar AsyncUnzlib = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous Zlib decompression stream\n     * @param cb The callback to call whenever data is deflated\n     */\n    function AsyncUnzlib(cb) {\n        this.ondata = cb;\n        astrmify([\n            bInflt,\n            zule,\n            function () { return [astrm, Inflate, Unzlib]; }\n        ], this, 0, function () {\n            var strm = new Unzlib();\n            onmessage = astrm(strm);\n        }, 11);\n    }\n    return AsyncUnzlib;\n}());\nexport { AsyncUnzlib };\nexport function unzlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        zule,\n        function () { return [unzlibSync]; }\n    ], function (ev) { return pbf(unzlibSync(ev.data[0], gu8(ev.data[1]))); }, 5, cb);\n}\n/**\n * Expands Zlib data\n * @param data The data to decompress\n * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.\n * @returns The decompressed version of the data\n */\nexport function unzlibSync(data, out) {\n    return inflt((zlv(data), data.subarray(2, -4)), out);\n}\n// Default algorithm for compression (used because having a known output size allows faster decompression)\nexport { gzip as compress, AsyncGzip as AsyncCompress };\n// Default algorithm for compression (used because having a known output size allows faster decompression)\nexport { gzipSync as compressSync, Gzip as Compress };\n/**\n * Streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar Decompress = /*#__PURE__*/ (function () {\n    /**\n     * Creates a decompression stream\n     * @param cb The callback to call whenever data is decompressed\n     */\n    function Decompress(cb) {\n        this.G = Gunzip;\n        this.I = Inflate;\n        this.Z = Unzlib;\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Decompress.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (!this.s) {\n            if (this.p && this.p.length) {\n                var n = new u8(this.p.length + chunk.length);\n                n.set(this.p), n.set(chunk, this.p.length);\n            }\n            else\n                this.p = chunk;\n            if (this.p.length > 2) {\n                var _this_1 = this;\n                var cb = function () { _this_1.ondata.apply(_this_1, arguments); };\n                this.s = (this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8)\n                    ? new this.G(cb)\n                    : ((this.p[0] & 15) != 8 || (this.p[0] >> 4) > 7 || ((this.p[0] << 8 | this.p[1]) % 31))\n                        ? new this.I(cb)\n                        : new this.Z(cb);\n                this.s.push(this.p, final);\n                this.p = null;\n            }\n        }\n        else\n            this.s.push(chunk, final);\n    };\n    return Decompress;\n}());\nexport { Decompress };\n/**\n * Asynchronous streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar AsyncDecompress = /*#__PURE__*/ (function () {\n    /**\n   * Creates an asynchronous decompression stream\n   * @param cb The callback to call whenever data is decompressed\n   */\n    function AsyncDecompress(cb) {\n        this.G = AsyncGunzip;\n        this.I = AsyncInflate;\n        this.Z = AsyncUnzlib;\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncDecompress.prototype.push = function (chunk, final) {\n        Decompress.prototype.push.call(this, chunk, final);\n    };\n    return AsyncDecompress;\n}());\nexport { AsyncDecompress };\nexport function decompress(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzip(data, opts, cb)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflate(data, opts, cb)\n            : unzlib(data, opts, cb);\n}\n/**\n * Expands compressed GZIP, Zlib, or raw DEFLATE data, automatically detecting the format\n * @param data The data to decompress\n * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.\n * @returns The decompressed version of the data\n */\nexport function decompressSync(data, out) {\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzipSync(data, out)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflateSync(data, out)\n            : unzlibSync(data, out);\n}\n// flatten a directory structure\nvar fltn = function (d, p, t, o) {\n    for (var k in d) {\n        var val = d[k], n = p + k, op = o;\n        if (Array.isArray(val))\n            op = mrg(o, val[1]), val = val[0];\n        if (val instanceof u8)\n            t[n] = [val, op];\n        else {\n            t[n += '/'] = [new u8(0), op];\n            fltn(val, n, t, o);\n        }\n    }\n};\n// text encoder\nvar te = typeof TextEncoder != 'undefined' && /*#__PURE__*/ new TextEncoder();\n// text decoder\nvar td = typeof TextDecoder != 'undefined' && /*#__PURE__*/ new TextDecoder();\n// text decoder stream\nvar tds = 0;\ntry {\n    td.decode(et, { stream: true });\n    tds = 1;\n}\ncatch (e) { }\n// decode UTF8\nvar dutf8 = function (d) {\n    for (var r = '', i = 0;;) {\n        var c = d[i++];\n        var eb = (c > 127) + (c > 223) + (c > 239);\n        if (i + eb > d.length)\n            return [r, slc(d, i - 1)];\n        if (!eb)\n            r += String.fromCharCode(c);\n        else if (eb == 3) {\n            c = ((c & 15) << 18 | (d[i++] & 63) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63)) - 65536,\n                r += String.fromCharCode(55296 | (c >> 10), 56320 | (c & 1023));\n        }\n        else if (eb & 1)\n            r += String.fromCharCode((c & 31) << 6 | (d[i++] & 63));\n        else\n            r += String.fromCharCode((c & 15) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63));\n    }\n};\n/**\n * Streaming UTF-8 decoding\n */\nvar DecodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is decoded\n     */\n    function DecodeUTF8(cb) {\n        this.ondata = cb;\n        if (tds)\n            this.t = new TextDecoder();\n        else\n            this.p = et;\n    }\n    /**\n     * Pushes a chunk to be decoded from UTF-8 binary\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    DecodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        final = !!final;\n        if (this.t) {\n            this.ondata(this.t.decode(chunk, { stream: true }), final);\n            if (final) {\n                if (this.t.decode().length)\n                    err(8);\n                this.t = null;\n            }\n            return;\n        }\n        if (!this.p)\n            err(4);\n        var dat = new u8(this.p.length + chunk.length);\n        dat.set(this.p);\n        dat.set(chunk, this.p.length);\n        var _a = dutf8(dat), ch = _a[0], np = _a[1];\n        if (final) {\n            if (np.length)\n                err(8);\n            this.p = null;\n        }\n        else\n            this.p = np;\n        this.ondata(ch, final);\n    };\n    return DecodeUTF8;\n}());\nexport { DecodeUTF8 };\n/**\n * Streaming UTF-8 encoding\n */\nvar EncodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is encoded\n     */\n    function EncodeUTF8(cb) {\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be encoded to UTF-8\n     * @param chunk The string data to push\n     * @param final Whether this is the last chunk\n     */\n    EncodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        this.ondata(strToU8(chunk), this.d = final || false);\n    };\n    return EncodeUTF8;\n}());\nexport { EncodeUTF8 };\n/**\n * Converts a string into a Uint8Array for use with compression/decompression methods\n * @param str The string to encode\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless decoding a binary string.\n * @returns The string encoded in UTF-8/Latin-1 binary\n */\nexport function strToU8(str, latin1) {\n    if (latin1) {\n        var ar_1 = new u8(str.length);\n        for (var i = 0; i < str.length; ++i)\n            ar_1[i] = str.charCodeAt(i);\n        return ar_1;\n    }\n    if (te)\n        return te.encode(str);\n    var l = str.length;\n    var ar = new u8(str.length + (str.length >> 1));\n    var ai = 0;\n    var w = function (v) { ar[ai++] = v; };\n    for (var i = 0; i < l; ++i) {\n        if (ai + 5 > ar.length) {\n            var n = new u8(ai + 8 + ((l - i) << 1));\n            n.set(ar);\n            ar = n;\n        }\n        var c = str.charCodeAt(i);\n        if (c < 128 || latin1)\n            w(c);\n        else if (c < 2048)\n            w(192 | (c >> 6)), w(128 | (c & 63));\n        else if (c > 55295 && c < 57344)\n            c = 65536 + (c & 1023 << 10) | (str.charCodeAt(++i) & 1023),\n                w(240 | (c >> 18)), w(128 | ((c >> 12) & 63)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n        else\n            w(224 | (c >> 12)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n    }\n    return slc(ar, 0, ai);\n}\n/**\n * Converts a Uint8Array to a string\n * @param dat The data to decode to string\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless encoding to binary string.\n * @returns The original UTF-8/Latin-1 string\n */\nexport function strFromU8(dat, latin1) {\n    if (latin1) {\n        var r = '';\n        for (var i = 0; i < dat.length; i += 16384)\n            r += String.fromCharCode.apply(null, dat.subarray(i, i + 16384));\n        return r;\n    }\n    else if (td)\n        return td.decode(dat);\n    else {\n        var _a = dutf8(dat), out = _a[0], ext = _a[1];\n        if (ext.length)\n            err(8);\n        return out;\n    }\n}\n;\n// deflate bit flag\nvar dbf = function (l) { return l == 1 ? 3 : l < 6 ? 2 : l == 9 ? 1 : 0; };\n// skip local zip header\nvar slzh = function (d, b) { return b + 30 + b2(d, b + 26) + b2(d, b + 28); };\n// read zip header\nvar zh = function (d, b, z) {\n    var fnl = b2(d, b + 28), fn = strFromU8(d.subarray(b + 46, b + 46 + fnl), !(b2(d, b + 8) & 2048)), es = b + 46 + fnl, bs = b4(d, b + 20);\n    var _a = z && bs == 4294967295 ? z64e(d, es) : [bs, b4(d, b + 24), b4(d, b + 42)], sc = _a[0], su = _a[1], off = _a[2];\n    return [b2(d, b + 10), sc, su, fn, es + b2(d, b + 30) + b2(d, b + 32), off];\n};\n// read zip64 extra field\nvar z64e = function (d, b) {\n    for (; b2(d, b) != 1; b += 4 + b2(d, b + 2))\n        ;\n    return [b8(d, b + 12), b8(d, b + 4), b8(d, b + 20)];\n};\n// extra field length\nvar exfl = function (ex) {\n    var le = 0;\n    if (ex) {\n        for (var k in ex) {\n            var l = ex[k].length;\n            if (l > 65535)\n                err(9);\n            le += l + 4;\n        }\n    }\n    return le;\n};\n// write zip header\nvar wzh = function (d, b, f, fn, u, c, ce, co) {\n    var fl = fn.length, ex = f.extra, col = co && co.length;\n    var exl = exfl(ex);\n    wbytes(d, b, ce != null ? 0x2014B50 : 0x4034B50), b += 4;\n    if (ce != null)\n        d[b++] = 20, d[b++] = f.os;\n    d[b] = 20, b += 2; // spec compliance? what's that?\n    d[b++] = (f.flag << 1) | (c < 0 && 8), d[b++] = u && 8;\n    d[b++] = f.compression & 255, d[b++] = f.compression >> 8;\n    var dt = new Date(f.mtime == null ? Date.now() : f.mtime), y = dt.getFullYear() - 1980;\n    if (y < 0 || y > 119)\n        err(10);\n    wbytes(d, b, (y << 25) | ((dt.getMonth() + 1) << 21) | (dt.getDate() << 16) | (dt.getHours() << 11) | (dt.getMinutes() << 5) | (dt.getSeconds() >>> 1)), b += 4;\n    if (c != -1) {\n        wbytes(d, b, f.crc);\n        wbytes(d, b + 4, c < 0 ? -c - 2 : c);\n        wbytes(d, b + 8, f.size);\n    }\n    wbytes(d, b + 12, fl);\n    wbytes(d, b + 14, exl), b += 16;\n    if (ce != null) {\n        wbytes(d, b, col);\n        wbytes(d, b + 6, f.attrs);\n        wbytes(d, b + 10, ce), b += 14;\n    }\n    d.set(fn, b);\n    b += fl;\n    if (exl) {\n        for (var k in ex) {\n            var exf = ex[k], l = exf.length;\n            wbytes(d, b, +k);\n            wbytes(d, b + 2, l);\n            d.set(exf, b + 4), b += 4 + l;\n        }\n    }\n    if (col)\n        d.set(co, b), b += col;\n    return b;\n};\n// write zip footer (end of central directory)\nvar wzf = function (o, b, c, d, e) {\n    wbytes(o, b, 0x6054B50); // skip disk\n    wbytes(o, b + 8, c);\n    wbytes(o, b + 10, c);\n    wbytes(o, b + 12, d);\n    wbytes(o, b + 16, e);\n};\n/**\n * A pass-through stream to keep data uncompressed in a ZIP archive.\n */\nvar ZipPassThrough = /*#__PURE__*/ (function () {\n    /**\n     * Creates a pass-through stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     */\n    function ZipPassThrough(filename) {\n        this.filename = filename;\n        this.c = crc();\n        this.size = 0;\n        this.compression = 0;\n    }\n    /**\n     * Processes a chunk and pushes to the output stream. You can override this\n     * method in a subclass for custom behavior, but by default this passes\n     * the data through. You must call this.ondata(err, chunk, final) at some\n     * point in this method.\n     * @param chunk The chunk to process\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.process = function (chunk, final) {\n        this.ondata(null, chunk, final);\n    };\n    /**\n     * Pushes a chunk to be added. If you are subclassing this with a custom\n     * compression algorithm, note that you must push data from the source\n     * file only, pre-compression.\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        this.c.p(chunk);\n        this.size += chunk.length;\n        if (final)\n            this.crc = this.c.d();\n        this.process(chunk, final || false);\n    };\n    return ZipPassThrough;\n}());\nexport { ZipPassThrough };\n// I don't extend because TypeScript extension adds 1kB of runtime bloat\n/**\n * Streaming DEFLATE compression for ZIP archives. Prefer using AsyncZipDeflate\n * for better performance\n */\nvar ZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function ZipDeflate(filename, opts) {\n        var _this_1 = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new Deflate(opts, function (dat, final) {\n            _this_1.ondata(null, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n    }\n    ZipDeflate.prototype.process = function (chunk, final) {\n        try {\n            this.d.push(chunk, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return ZipDeflate;\n}());\nexport { ZipDeflate };\n/**\n * Asynchronous streaming DEFLATE compression for ZIP archives\n */\nvar AsyncZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function AsyncZipDeflate(filename, opts) {\n        var _this_1 = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new AsyncDeflate(opts, function (err, dat, final) {\n            _this_1.ondata(err, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n        this.terminate = this.d.terminate;\n    }\n    AsyncZipDeflate.prototype.process = function (chunk, final) {\n        this.d.push(chunk, final);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return AsyncZipDeflate;\n}());\nexport { AsyncZipDeflate };\n// TODO: Better tree shaking\n/**\n * A zippable archive to which files can incrementally be added\n */\nvar Zip = /*#__PURE__*/ (function () {\n    /**\n     * Creates an empty ZIP archive to which files can be added\n     * @param cb The callback to call whenever data for the generated ZIP archive\n     *           is available\n     */\n    function Zip(cb) {\n        this.ondata = cb;\n        this.u = [];\n        this.d = 1;\n    }\n    /**\n     * Adds a file to the ZIP archive\n     * @param file The file stream to add\n     */\n    Zip.prototype.add = function (file) {\n        var _this_1 = this;\n        if (!this.ondata)\n            err(5);\n        // finishing or finished\n        if (this.d & 2)\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, false);\n        else {\n            var f = strToU8(file.filename), fl_1 = f.length;\n            var com = file.comment, o = com && strToU8(com);\n            var u = fl_1 != file.filename.length || (o && (com.length != o.length));\n            var hl_1 = fl_1 + exfl(file.extra) + 30;\n            if (fl_1 > 65535)\n                this.ondata(err(11, 0, 1), null, false);\n            var header = new u8(hl_1);\n            wzh(header, 0, file, f, u, -1);\n            var chks_1 = [header];\n            var pAll_1 = function () {\n                for (var _i = 0, chks_2 = chks_1; _i < chks_2.length; _i++) {\n                    var chk = chks_2[_i];\n                    _this_1.ondata(null, chk, false);\n                }\n                chks_1 = [];\n            };\n            var tr_1 = this.d;\n            this.d = 0;\n            var ind_1 = this.u.length;\n            var uf_1 = mrg(file, {\n                f: f,\n                u: u,\n                o: o,\n                t: function () {\n                    if (file.terminate)\n                        file.terminate();\n                },\n                r: function () {\n                    pAll_1();\n                    if (tr_1) {\n                        var nxt = _this_1.u[ind_1 + 1];\n                        if (nxt)\n                            nxt.r();\n                        else\n                            _this_1.d = 1;\n                    }\n                    tr_1 = 1;\n                }\n            });\n            var cl_1 = 0;\n            file.ondata = function (err, dat, final) {\n                if (err) {\n                    _this_1.ondata(err, dat, final);\n                    _this_1.terminate();\n                }\n                else {\n                    cl_1 += dat.length;\n                    chks_1.push(dat);\n                    if (final) {\n                        var dd = new u8(16);\n                        wbytes(dd, 0, 0x8074B50);\n                        wbytes(dd, 4, file.crc);\n                        wbytes(dd, 8, cl_1);\n                        wbytes(dd, 12, file.size);\n                        chks_1.push(dd);\n                        uf_1.c = cl_1, uf_1.b = hl_1 + cl_1 + 16, uf_1.crc = file.crc, uf_1.size = file.size;\n                        if (tr_1)\n                            uf_1.r();\n                        tr_1 = 1;\n                    }\n                    else if (tr_1)\n                        pAll_1();\n                }\n            };\n            this.u.push(uf_1);\n        }\n    };\n    /**\n     * Ends the process of adding files and prepares to emit the final chunks.\n     * This *must* be called after adding all desired files for the resulting\n     * ZIP file to work properly.\n     */\n    Zip.prototype.end = function () {\n        var _this_1 = this;\n        if (this.d & 2) {\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, true);\n            return;\n        }\n        if (this.d)\n            this.e();\n        else\n            this.u.push({\n                r: function () {\n                    if (!(_this_1.d & 1))\n                        return;\n                    _this_1.u.splice(-1, 1);\n                    _this_1.e();\n                },\n                t: function () { }\n            });\n        this.d = 3;\n    };\n    Zip.prototype.e = function () {\n        var bt = 0, l = 0, tl = 0;\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            tl += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0);\n        }\n        var out = new u8(tl + 22);\n        for (var _b = 0, _c = this.u; _b < _c.length; _b++) {\n            var f = _c[_b];\n            wzh(out, bt, f, f.f, f.u, -f.c - 2, l, f.o);\n            bt += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0), l += f.b;\n        }\n        wzf(out, bt, this.u.length, tl, l);\n        this.ondata(null, out, true);\n        this.d = 2;\n    };\n    /**\n     * A method to terminate any internal workers used by the stream. Subsequent\n     * calls to add() will fail.\n     */\n    Zip.prototype.terminate = function () {\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            f.t();\n        }\n        this.d = 2;\n    };\n    return Zip;\n}());\nexport { Zip };\nexport function zip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var r = {};\n    fltn(data, '', r, opts);\n    var k = Object.keys(r);\n    var lft = k.length, o = 0, tot = 0;\n    var slft = lft, files = new Array(lft);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var cbf = function () {\n        var out = new u8(tot + 22), oe = o, cdl = tot - o;\n        tot = 0;\n        for (var i = 0; i < slft; ++i) {\n            var f = files[i];\n            try {\n                var l = f.c.length;\n                wzh(out, tot, f, f.f, f.u, l);\n                var badd = 30 + f.f.length + exfl(f.extra);\n                var loc = tot + badd;\n                out.set(f.c, loc);\n                wzh(out, o, f, f.f, f.u, l, tot, f.m), o += 16 + badd + (f.m ? f.m.length : 0), tot = loc + l;\n            }\n            catch (e) {\n                return cbd(e, null);\n            }\n        }\n        wzf(out, o, files.length, cdl, oe);\n        cbd(null, out);\n    };\n    if (!lft)\n        cbf();\n    var _loop_1 = function (i) {\n        var fn = k[i];\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var c = crc(), size = file.length;\n        c.p(file);\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        var compression = p.level == 0 ? 0 : 8;\n        var cbl = function (e, d) {\n            if (e) {\n                tAll();\n                cbd(e, null);\n            }\n            else {\n                var l = d.length;\n                files[i] = mrg(p, {\n                    size: size,\n                    crc: c.d(),\n                    c: d,\n                    f: f,\n                    m: m,\n                    u: s != fn.length || (m && (com.length != ms)),\n                    compression: compression\n                });\n                o += 30 + s + exl + l;\n                tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n                if (!--lft)\n                    cbf();\n            }\n        };\n        if (s > 65535)\n            cbl(err(11, 0, 1), null);\n        if (!compression)\n            cbl(null, file);\n        else if (size < 160000) {\n            try {\n                cbl(null, deflateSync(file, p));\n            }\n            catch (e) {\n                cbl(e, null);\n            }\n        }\n        else\n            term.push(deflate(file, p, cbl));\n    };\n    // Cannot use lft because it can decrease\n    for (var i = 0; i < slft; ++i) {\n        _loop_1(i);\n    }\n    return tAll;\n}\n/**\n * Synchronously creates a ZIP file. Prefer using `zip` for better performance\n * with more than one file.\n * @param data The directory structure for the ZIP archive\n * @param opts The main options, merged with per-file options\n * @returns The generated ZIP archive\n */\nexport function zipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var r = {};\n    var files = [];\n    fltn(data, '', r, opts);\n    var o = 0;\n    var tot = 0;\n    for (var fn in r) {\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var compression = p.level == 0 ? 0 : 8;\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        if (s > 65535)\n            err(11);\n        var d = compression ? deflateSync(file, p) : file, l = d.length;\n        var c = crc();\n        c.p(file);\n        files.push(mrg(p, {\n            size: file.length,\n            crc: c.d(),\n            c: d,\n            f: f,\n            m: m,\n            u: s != fn.length || (m && (com.length != ms)),\n            o: o,\n            compression: compression\n        }));\n        o += 30 + s + exl + l;\n        tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n    }\n    var out = new u8(tot + 22), oe = o, cdl = tot - o;\n    for (var i = 0; i < files.length; ++i) {\n        var f = files[i];\n        wzh(out, f.o, f, f.f, f.u, f.c.length);\n        var badd = 30 + f.f.length + exfl(f.extra);\n        out.set(f.c, f.o + badd);\n        wzh(out, o, f, f.f, f.u, f.c.length, f.o, f.m), o += 16 + badd + (f.m ? f.m.length : 0);\n    }\n    wzf(out, o, files.length, cdl, oe);\n    return out;\n}\n/**\n * Streaming pass-through decompression for ZIP archives\n */\nvar UnzipPassThrough = /*#__PURE__*/ (function () {\n    function UnzipPassThrough() {\n    }\n    UnzipPassThrough.prototype.push = function (data, final) {\n        this.ondata(null, data, final);\n    };\n    UnzipPassThrough.compression = 0;\n    return UnzipPassThrough;\n}());\nexport { UnzipPassThrough };\n/**\n * Streaming DEFLATE decompression for ZIP archives. Prefer AsyncZipInflate for\n * better performance.\n */\nvar UnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function UnzipInflate() {\n        var _this_1 = this;\n        this.i = new Inflate(function (dat, final) {\n            _this_1.ondata(null, dat, final);\n        });\n    }\n    UnzipInflate.prototype.push = function (data, final) {\n        try {\n            this.i.push(data, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    UnzipInflate.compression = 8;\n    return UnzipInflate;\n}());\nexport { UnzipInflate };\n/**\n * Asynchronous streaming DEFLATE decompression for ZIP archives\n */\nvar AsyncUnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function AsyncUnzipInflate(_, sz) {\n        var _this_1 = this;\n        if (sz < 320000) {\n            this.i = new Inflate(function (dat, final) {\n                _this_1.ondata(null, dat, final);\n            });\n        }\n        else {\n            this.i = new AsyncInflate(function (err, dat, final) {\n                _this_1.ondata(err, dat, final);\n            });\n            this.terminate = this.i.terminate;\n        }\n    }\n    AsyncUnzipInflate.prototype.push = function (data, final) {\n        if (this.i.terminate)\n            data = slc(data, 0);\n        this.i.push(data, final);\n    };\n    AsyncUnzipInflate.compression = 8;\n    return AsyncUnzipInflate;\n}());\nexport { AsyncUnzipInflate };\n/**\n * A ZIP archive decompression stream that emits files as they are discovered\n */\nvar Unzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates a ZIP decompression stream\n     * @param cb The callback to call whenever a file in the ZIP archive is found\n     */\n    function Unzip(cb) {\n        this.onfile = cb;\n        this.k = [];\n        this.o = {\n            0: UnzipPassThrough\n        };\n        this.p = et;\n    }\n    /**\n     * Pushes a chunk to be unzipped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzip.prototype.push = function (chunk, final) {\n        var _this_1 = this;\n        if (!this.onfile)\n            err(5);\n        if (!this.p)\n            err(4);\n        if (this.c > 0) {\n            var len = Math.min(this.c, chunk.length);\n            var toAdd = chunk.subarray(0, len);\n            this.c -= len;\n            if (this.d)\n                this.d.push(toAdd, !this.c);\n            else\n                this.k[0].push(toAdd);\n            chunk = chunk.subarray(len);\n            if (chunk.length)\n                return this.push(chunk, final);\n        }\n        else {\n            var f = 0, i = 0, is = void 0, buf = void 0;\n            if (!this.p.length)\n                buf = chunk;\n            else if (!chunk.length)\n                buf = this.p;\n            else {\n                buf = new u8(this.p.length + chunk.length);\n                buf.set(this.p), buf.set(chunk, this.p.length);\n            }\n            var l = buf.length, oc = this.c, add = oc && this.d;\n            var _loop_2 = function () {\n                var _a;\n                var sig = b4(buf, i);\n                if (sig == 0x4034B50) {\n                    f = 1, is = i;\n                    this_1.d = null;\n                    this_1.c = 0;\n                    var bf = b2(buf, i + 6), cmp_1 = b2(buf, i + 8), u = bf & 2048, dd = bf & 8, fnl = b2(buf, i + 26), es = b2(buf, i + 28);\n                    if (l > i + 30 + fnl + es) {\n                        var chks_3 = [];\n                        this_1.k.unshift(chks_3);\n                        f = 2;\n                        var sc_1 = b4(buf, i + 18), su_1 = b4(buf, i + 22);\n                        var fn_1 = strFromU8(buf.subarray(i + 30, i += 30 + fnl), !u);\n                        if (sc_1 == 4294967295) {\n                            _a = dd ? [-2] : z64e(buf, i), sc_1 = _a[0], su_1 = _a[1];\n                        }\n                        else if (dd)\n                            sc_1 = -1;\n                        i += es;\n                        this_1.c = sc_1;\n                        var d_1;\n                        var file_1 = {\n                            name: fn_1,\n                            compression: cmp_1,\n                            start: function () {\n                                if (!file_1.ondata)\n                                    err(5);\n                                if (!sc_1)\n                                    file_1.ondata(null, et, true);\n                                else {\n                                    var ctr = _this_1.o[cmp_1];\n                                    if (!ctr)\n                                        file_1.ondata(err(14, 'unknown compression type ' + cmp_1, 1), null, false);\n                                    d_1 = sc_1 < 0 ? new ctr(fn_1) : new ctr(fn_1, sc_1, su_1);\n                                    d_1.ondata = function (err, dat, final) { file_1.ondata(err, dat, final); };\n                                    for (var _i = 0, chks_4 = chks_3; _i < chks_4.length; _i++) {\n                                        var dat = chks_4[_i];\n                                        d_1.push(dat, false);\n                                    }\n                                    if (_this_1.k[0] == chks_3 && _this_1.c)\n                                        _this_1.d = d_1;\n                                    else\n                                        d_1.push(et, true);\n                                }\n                            },\n                            terminate: function () {\n                                if (d_1 && d_1.terminate)\n                                    d_1.terminate();\n                            }\n                        };\n                        if (sc_1 >= 0)\n                            file_1.size = sc_1, file_1.originalSize = su_1;\n                        this_1.onfile(file_1);\n                    }\n                    return \"break\";\n                }\n                else if (oc) {\n                    if (sig == 0x8074B50) {\n                        is = i += 12 + (oc == -2 && 8), f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                    else if (sig == 0x2014B50) {\n                        is = i -= 4, f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                }\n            };\n            var this_1 = this;\n            for (; i < l - 4; ++i) {\n                var state_1 = _loop_2();\n                if (state_1 === \"break\")\n                    break;\n            }\n            this.p = et;\n            if (oc < 0) {\n                var dat = f ? buf.subarray(0, is - 12 - (oc == -2 && 8) - (b4(buf, is - 16) == 0x8074B50 && 4)) : buf.subarray(0, i);\n                if (add)\n                    add.push(dat, !!f);\n                else\n                    this.k[+(f == 2)].push(dat);\n            }\n            if (f & 2)\n                return this.push(buf.subarray(i), final);\n            this.p = buf.subarray(i);\n        }\n        if (final) {\n            if (this.c)\n                err(13);\n            this.p = null;\n        }\n    };\n    /**\n     * Registers a decoder with the stream, allowing for files compressed with\n     * the compression type provided to be expanded correctly\n     * @param decoder The decoder constructor\n     */\n    Unzip.prototype.register = function (decoder) {\n        this.o[decoder.compression] = decoder;\n    };\n    return Unzip;\n}());\nexport { Unzip };\nvar mt = typeof queueMicrotask == 'function' ? queueMicrotask : typeof setTimeout == 'function' ? setTimeout : function (fn) { fn(); };\nexport function unzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var files = {};\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558) {\n            cbd(err(13, 0, 1), null);\n            return tAll;\n        }\n    }\n    ;\n    var lft = b2(data, e + 8);\n    if (lft) {\n        var c = lft;\n        var o = b4(data, e + 16);\n        var z = o == 4294967295 || c == 65535;\n        if (z) {\n            var ze = b4(data, e - 12);\n            z = b4(data, ze) == 0x6064B50;\n            if (z) {\n                c = lft = b4(data, ze + 32);\n                o = b4(data, ze + 48);\n            }\n        }\n        var fltr = opts && opts.filter;\n        var _loop_3 = function (i) {\n            var _a = zh(data, o, z), c_1 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n            o = no;\n            var cbl = function (e, d) {\n                if (e) {\n                    tAll();\n                    cbd(e, null);\n                }\n                else {\n                    if (d)\n                        files[fn] = d;\n                    if (!--lft)\n                        cbd(null, files);\n                }\n            };\n            if (!fltr || fltr({\n                name: fn,\n                size: sc,\n                originalSize: su,\n                compression: c_1\n            })) {\n                if (!c_1)\n                    cbl(null, slc(data, b, b + sc));\n                else if (c_1 == 8) {\n                    var infl = data.subarray(b, b + sc);\n                    if (sc < 320000) {\n                        try {\n                            cbl(null, inflateSync(infl, new u8(su)));\n                        }\n                        catch (e) {\n                            cbl(e, null);\n                        }\n                    }\n                    else\n                        term.push(inflate(infl, { size: su }, cbl));\n                }\n                else\n                    cbl(err(14, 'unknown compression type ' + c_1, 1), null);\n            }\n            else\n                cbl(null, null);\n        };\n        for (var i = 0; i < c; ++i) {\n            _loop_3(i);\n        }\n    }\n    else\n        cbd(null, {});\n    return tAll;\n}\n/**\n * Synchronously decompresses a ZIP archive. Prefer using `unzip` for better\n * performance with more than one file.\n * @param data The raw compressed ZIP file\n * @param opts The ZIP extraction options\n * @returns The decompressed files\n */\nexport function unzipSync(data, opts) {\n    var files = {};\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558)\n            err(13);\n    }\n    ;\n    var c = b2(data, e + 8);\n    if (!c)\n        return {};\n    var o = b4(data, e + 16);\n    var z = o == 4294967295 || c == 65535;\n    if (z) {\n        var ze = b4(data, e - 12);\n        z = b4(data, ze) == 0x6064B50;\n        if (z) {\n            c = b4(data, ze + 32);\n            o = b4(data, ze + 48);\n        }\n    }\n    var fltr = opts && opts.filter;\n    for (var i = 0; i < c; ++i) {\n        var _a = zh(data, o, z), c_2 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n        o = no;\n        if (!fltr || fltr({\n            name: fn,\n            size: sc,\n            originalSize: su,\n            compression: c_2\n        })) {\n            if (!c_2)\n                files[fn] = slc(data, b, b + sc);\n            else if (c_2 == 8)\n                files[fn] = inflateSync(data.subarray(b, b + sc), new u8(su));\n            else\n                err(14, 'unknown compression type ' + c_2);\n        }\n    }\n    return files;\n}\n","\r\nimport { defineComponent, onBeforeMount, onDeactivated, onMounted, PropType, ref } from \"vue\";\r\n\r\nimport FolderItemsList from \"@/components/apps/folderItem/FolderItemsList.vue\";\r\n\r\nimport ItemDialog from \"@/models/ItemDialog\";\r\nimport * as fflate from \"fflate\";\r\nimport { getStat, isDir, readFile } from \"@/context/fileSystemController\";\r\nimport useBase64Handler from \"@/hooks/useBase64Handler\";\r\nimport { useFileSystemStore } from \"@/stores/fileSystemStore\";\r\nimport PathAndContent from \"@/models/PathAndContent\";\r\nimport { TEMP_PATH } from \"@/constants\";\r\nimport DesktopItem from \"@/models/DesktopItem\";\r\nimport { getFileExtensionFromName, MIME_TYPES } from \"@/context/fileSystemUtils\";\r\nimport ActionMenu, { ActionItem } from \"@/models/ActionMenu\";\r\n\r\nexport default defineComponent({\r\n  props: {\r\n    itemDialog: Object as PropType<ItemDialog>,\r\n    height: Number,\r\n  },\r\n  components: { FolderItemsList },\r\n  emits: [],\r\n  setup(props, _) {\r\n    const fileSystemStore = useFileSystemStore();\r\n    const { removeDataUri, uint8ArrayToBase64 } = useBase64Handler();\r\n    const items = ref<string[]>([]);\r\n\r\n    onBeforeMount(async () => {\r\n      if (props.itemDialog?.path) {\r\n        let compressed = await readFile(props.itemDialog?.path);\r\n        let buf = Buffer.from(removeDataUri(compressed), \"base64\");\r\n        const decompressedFiles = fflate.unzipSync(buf);\r\n\r\n        const decompressedFilesName = Object.keys(decompressedFiles);\r\n        decompressedFilesName.forEach(async (fileName) => {\r\n          const mimeType = MIME_TYPES[getFileExtensionFromName(fileName)];\r\n          const base64File = `data:${mimeType};base64,${uint8ArrayToBase64(decompressedFiles[fileName])}`;\r\n          const filePath = `${TEMP_PATH}/${fileName}`;\r\n          const pathAndContent: PathAndContent = { path: filePath, content: base64File };\r\n          await fileSystemStore.createFile(pathAndContent);\r\n          items.value.push(filePath);\r\n        });\r\n      }\r\n    });\r\n\r\n    onDeactivated(async () => {\r\n      items.value.forEach((filePath) => {\r\n        fileSystemStore.deleteFileSystemItem(filePath);\r\n      });\r\n    });\r\n\r\n    const doubleClickHandler = async (filePath: string) => {\r\n      const isDirectory = await isDir(filePath);\r\n      if (isDirectory) {\r\n        return;\r\n      } else {\r\n        const newItemDialog = {\r\n          path: filePath,\r\n          coordinates: { x: 0, y: 0 },\r\n          isSelected: true,\r\n        } as DesktopItem;\r\n        await fileSystemStore.createItemDialog(newItemDialog);\r\n      }\r\n    };\r\n\r\n    const rightClickItemHandler = (eventAndPath: { event: Event; filePath: string }) => {\r\n      openActionMenu(eventAndPath.event, false, eventAndPath.filePath);\r\n    };\r\n\r\n    const openActionMenu = (event: any, isOpenedFolder = false, customPath?: string) => {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n      const pointerEvent = event as PointerEvent;\r\n\r\n      fileSystemStore.setActionMenu({\r\n        show: true,\r\n        paths: customPath ? [customPath] : [props.itemDialog?.path],\r\n        position: { x: pointerEvent.clientX, y: pointerEvent.clientY },\r\n        isOpenedFolder: isOpenedFolder,\r\n        customLayout: {},\r\n      } as ActionMenu);\r\n    };\r\n\r\n    return { items, doubleClickHandler, rightClickItemHandler };\r\n  },\r\n});\r\n","import { render } from \"./CompressionItem.vue?vue&type=template&id=128c7b7f&ts=true\"\nimport script from \"./CompressionItem.vue?vue&type=script&lang=ts\"\nexport * from \"./CompressionItem.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"C:\\\\Users\\\\Stefano\\\\coding\\\\desktop-web\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","export const formatBytes = (bytes: number, decimals = 2) => {\r\n  if (!+bytes) {\r\n    return \"0 Bytes\";\r\n  }\r\n\r\n  const k = 1024;\r\n  const dm = decimals < 0 ? 0 : decimals;\r\n  const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\r\n\r\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n\r\n  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(dm))} ${sizes[i]}`;\r\n};\r\n","export const formatStringDate = (stringDate: string, format: string) => {\r\n  const date = new Date(stringDate);\r\n\r\n  const day = date.getDay() < 10 ? \"0\" + date.getDay().toString() : date.getDay().toString();\r\n  const month = date.getMonth() < 10 ? \"0\" + date.getMonth().toString() : date.getMonth().toString();\r\n  const year = date.getFullYear().toString();\r\n\r\n  return format.replace(\"DD\", day).replace(\"MM\", month).replace(\"YYYY\", year);\r\n};\r\n\r\nexport const formatTimeFromStringDate = (stringDate: string, format: string) => {\r\n  const date = new Date(stringDate);\r\n\r\n  const isHour12 = format.includes(\"XM\");\r\n\r\n  const seconds = date.getSeconds() < 10 ? \"0\" + date.getSeconds().toString() : date.getSeconds().toString();\r\n  const minutes = date.getMinutes() < 10 ? \"0\" + date.getMinutes().toString() : date.getMinutes().toString();\r\n\r\n  let hours = date.getHours();\r\n  let ampm = \"\";\r\n  if (isHour12) {\r\n    ampm = hours >= 12 ? \"pm\" : \"am\";\r\n    hours = hours % 12;\r\n    hours = hours ? hours : 12;\r\n  }\r\n\r\n  return format.replace(\"HH\", hours.toString()).replace(\"MM\", minutes).replace(\"SS\", seconds).replace(\"XM\", ampm);\r\n};\r\n","import { render } from \"./FolderItemsList.vue?vue&type=template&id=ba70c8fe&scoped=true&ts=true\"\nimport script from \"./FolderItemsList.vue?vue&type=script&lang=ts\"\nexport * from \"./FolderItemsList.vue?vue&type=script&lang=ts\"\n\nimport \"./FolderItemsList.vue?vue&type=style&index=0&id=ba70c8fe&scoped=true&lang=css\"\n\nimport exportComponent from \"C:\\\\Users\\\\Stefano\\\\coding\\\\desktop-web\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-ba70c8fe\"]])\n\nexport default __exports__"],"names":["global","isPrototypeOf","TypeError","module","exports","it","Prototype","IndexSizeError","s","c","m","DOMStringSizeError","HierarchyRequestError","WrongDocumentError","InvalidCharacterError","NoDataAllowedError","NoModificationAllowedError","NotFoundError","NotSupportedError","InUseAttributeError","InvalidStateError","SyntaxError","InvalidModificationError","NamespaceError","InvalidAccessError","ValidationError","TypeMismatchError","SecurityError","NetworkError","AbortError","URLMismatchError","QuotaExceededError","TimeoutError","InvalidNodeTypeError","DataCloneError","$","getBuiltIn","createPropertyDescriptor","defineProperty","hasOwn","anInstance","inheritIfRequired","normalizeStringArgument","DOMExceptionConstants","clearErrorStack","IS_PURE","DOM_EXCEPTION","Error","NativeDOMException","$DOMException","this","DOMExceptionPrototype","argumentsLength","arguments","length","message","undefined","name","that","error","stack","prototype","ERROR_HAS_STACK","DOM_EXCEPTION_HAS_STACK","FORCED_CONSTRUCTOR","forced","DOMException","PolyfilledDOMException","PolyfilledDOMExceptionPrototype","constructor","key","constant","constantName","useBase64Handler","b64ToText","base64Data","shouldRemoveDataUri","textToDecrypt","removeDataUri","decodeURIComponent","escape","window","atob","utf8ToB64","str","btoa","unescape","encodeURIComponent","substr","indexOf","isBase64","base64regex","test","uint8ArrayToBase64","uint8Array","binary","len","byteLength","i","String","fromCharCode","render","_ctx","_cache","$props","$setup","$data","$options","_component_FolderItemsList","_resolveComponent","_openBlock","_createElementBlock","style","_normalizeStyle","height","_createVNode","itemsList","items","canRename","isFocused","itemDialog","onOnDoubleClick","doubleClickHandler","onOnRightClick","rightClickItemHandler","u8","Uint8Array","u16","Uint16Array","u32","Uint32Array","fleb","fdeb","clim","freb","eb","start","b","r","j","_a","fl","revfl","_b","fd","rev","x","hMap","cd","mb","l","co","le","rvb","sv","r_1","v","flt","fdt","flrm","fdrm","max","a","bits","d","p","o","bits16","shft","slc","e","n","BYTES_PER_ELEMENT","set","subarray","ec","err","ind","msg","nt","code","captureStackTrace","inflt","dat","buf","st","sl","f","noBuf","noSt","cbuf","bl","nbuf","Math","final","pos","bt","lm","dm","lbt","dbt","tbts","type","t","hLit","hcLen","tl","ldt","clt","clb","clbmsk","clm","lt","dt","lms","dms","lpos","sym","add","dsym","end","et","b2","b4","b8","inflateSync","data","out","td","TextDecoder","decode","stream","dutf8","strFromU8","latin1","apply","ext","slzh","zh","z","fnl","fn","es","bs","z64e","sc","su","off","queueMicrotask","setTimeout","unzipSync","opts","files","ze","fltr","filter","c_2","no","size","originalSize","compression","defineComponent","props","Object","Number","components","FolderItemsList","emits","setup","_","fileSystemStore","useFileSystemStore","ref","onBeforeMount","path","compressed","readFile","Buffer","from","decompressedFiles","fflate","decompressedFilesName","keys","forEach","mimeType","MIME_TYPES","getFileExtensionFromName","fileName","base64File","filePath","TEMP_PATH","pathAndContent","content","createFile","value","push","onDeactivated","deleteFileSystemItem","isDirectory","isDir","newItemDialog","coordinates","y","isSelected","createItemDialog","eventAndPath","openActionMenu","event","isOpenedFolder","customPath","preventDefault","stopPropagation","pointerEvent","setActionMenu","show","paths","position","clientX","clientY","customLayout","__exports__","_withScopeId","_pushScopeId","_popScopeId","_hoisted_1","class","_hoisted_2","_createElementVNode","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_component_FileIcon","_normalizeClass","viewType","_toDisplayString","getFileNameFromPath","fileNameToChange","showProperties","_createCommentVNode","_Fragment","_renderList","itemsListWithProperties","item","index","isCutFile","onDblclick","$event","onMousedown","_withModifiers","itemClickHandler","onContextmenu","rightClickHandler","selected","selectedItem","isEditingSelectedValue","_withDirectives","ref_for","onKeyup","_withKeys","args","renameFileHandler","onBlur","changeFileName","rows","_vModelText","onClick","setIsEditingText","draggable","onDragstart","dragStartHandler","noStyle","fileFocusedWidth","formatStringDate","properties","ctime","dateFormat","formatTimeFromStringDate","timeFormat","formatBytes","bytes","decimals","k","sizes","floor","log","parseFloat","pow","toFixed","stringDate","format","date","Date","day","getDay","toString","month","getMonth","year","getFullYear","replace","isHour12","includes","seconds","getSeconds","minutes","getMinutes","hours","getHours","ampm","Array","required","Boolean","default","FileIcon","ctx","settingsStore","useSettingsStore","fileNameInputRef","fileNameToChangeSpanRef","computed","updateItemListWithProperties","itemWithProp","getStat","watchEffect","itemName","filesToCut","filePathsToCut","emit","newName","getSourcePathFromFilePath","oldName","deselectItem","keyDownHandler","findIndex","onMounted","addEventListener","removeEventListener"],"sourceRoot":""}