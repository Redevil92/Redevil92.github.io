{"version":3,"file":"js/9177.6d5bb3c7.js","mappings":"6QAUA,GAA6BA,EAAAA,EAAAA,IAAiB,CAC1CC,MAAO,CACHC,WAAYC,OACZC,OAAQ,CAAEC,KAAMC,OAAQC,QAAS,MAErCC,MAAMC,GACF,MAAMR,EAAQQ,EACRC,GAAkBC,EAAAA,EAAAA,MAClB,eAAEC,EAAF,mCAAkBC,IAAuCC,EAAAA,EAAAA,KACzDC,GAAQC,EAAAA,EAAAA,IAAI,IACZC,GAAwBD,EAAAA,EAAAA,KAAI,IAClCE,EAAAA,EAAAA,KAAc,gBACJC,EAAsBC,EAAAA,IACxBnB,EAAMC,YAAYmB,mBAAmBJ,wBACrCA,EAAsBK,MAAQrB,EAAMC,WAAWmB,mBAAmBJ,sBACrE,KAELM,EAAAA,EAAAA,KAAY,UACRC,QAAQC,IAAI,WAAYV,EAAMO,OAC9B,IAAK,MAAMI,KAAYX,EAAMO,MACzBE,QAAQC,IAAI,EAAG,WAAYC,SACrBhB,EAAgBiB,qBAAqBD,EAC9C,IAEL,MAAME,EAAqB,UACvB,MAAMC,QAAoBC,EAAAA,EAAAA,IAAMJ,GAChC,IAAIG,EAGC,CACD,MAAME,EAAgB,CAClBC,KAAMN,EACNO,YAAa,CAAEC,EAAG,EAAGC,EAAG,GACxBC,YAAY,SAEV1B,EAAgB2B,iBAAiBN,EAC1C,GAECZ,EAAwB,UAC1B,GAAIlB,EAAMC,YAAY8B,KAAM,CACxB,IAAIM,QAAmBC,EAAAA,EAAAA,IAAStC,EAAMC,YAAY8B,MAClD,MAAMQ,EAAoB5B,EAAe0B,GAGnCG,QAA2B5B,EAAmC2B,EAAmBE,GAEvF3B,EAAMO,MAAQmB,QACR/B,EAAgBiC,kCAChBjC,EAAgBkC,oBACtB3B,EAAsBK,OAAQ,CACjC,GAECuB,EAAyBC,IAC3BC,EAAeD,EAAaE,OAAO,EAAOF,EAAapB,SAAvD,EAEEqB,EAAiB,CAACC,EAAOC,GAAiB,EAAOC,KACnDF,EAAMG,iBACNH,EAAMI,kBACN,MAAMC,EAAeL,EACfM,EAAgB,EAClBC,EAAAA,EAAAA,IAAW,CAACL,IAAa,GAAO,GAChC,CACIM,aAAc,kBACdC,UAAU,EACVC,UAAW,QACXC,WAAY,OACZC,iBAAiB,EACjBC,SAAU,IAAMjC,EAAmBsB,GACnCY,UAAU,IAGlBpD,EAAgBqD,cAAc,CAC1BC,MAAM,EACNC,MAAOf,EAAa,CAACA,GAAc,CAACjD,EAAMC,YAAY8B,MACtDkC,SAAU,CAAEhC,EAAGmB,EAAac,QAAShC,EAAGkB,EAAae,SACrDC,aAAcf,GAJlB,EAOJ,MAAO,CAACgB,EAAMC,MACFC,EAAAA,EAAAA,OAAcC,EAAAA,EAAAA,IAAoB,MAAO,CAC7CC,OAAOC,EAAAA,EAAAA,IAAiB,mCAAkClE,EAAQL,OAAS,QAC5E,CACEa,EAAsBK,QAChBkD,EAAAA,EAAAA,OAAcI,EAAAA,EAAAA,IAAaC,EAAAA,EAAsB,CAChDC,IAAK,EACLC,mBAAoB5D,EACpB6D,cAAeT,EAAO,KAAOA,EAAO,GAAMU,GAAYhE,EAAsBK,OAAQ,GACpF4D,iBAAiB,EACjBC,iBAAkB,cAEpBC,EAAAA,EAAAA,IAAoB,IAAI,IAC9BC,EAAAA,EAAAA,IAAaC,EAAAA,WAAiB,CAC1BlF,OAAQK,EAAQL,OAAS,GACzBmF,UAAWxE,EAAMO,MACjBkE,WAAW,EACXC,UAAWhF,EAAQP,YAAYuF,UAC/BC,gBAAiB9D,EACjB+D,eAAgB9C,GACjB,KAAM,EAAG,CAAC,SAAU,YAAa,eACrC,GAEV,IC5GL,MAAM+C,EAAc,EAEpB,O","sources":["webpack://my-portfolio/./node_modules/vue-loader/dist/index.js","webpack://my-portfolio/./src/components/apps/compressedFileItem/CompressedFileItem.vue"],"sourcesContent":["import { defineComponent as _defineComponent } from 'vue'\nimport { openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createVNode as _createVNode, normalizeStyle as _normalizeStyle, createElementBlock as _createElementBlock } from \"vue\"\n\nimport { onBeforeMount, onUnmounted, PropType, ref } from \"vue\";\r\n\r\nimport SelectedFolderDialog from \"@/components/shared/SelectedFolderDialog.vue\";\r\nimport FolderItemsList from \"@/components/apps/folderItem/FolderItemsList.vue\";\r\n\r\nimport ItemDialog from \"@/models/ItemDialog\";\r\nimport { getFiles, isDir, readFile } from \"@/context/fileSystemController\";\r\nimport { useFileSystemStore } from \"@/stores/fileSystemStore\";\r\n\r\nimport DesktopItem from \"@/models/DesktopItem\";\r\nimport ActionMenu from \"@/models/ActionMenu\";\r\nimport useCompression from \"@/hooks/useCompression\";\r\nimport { TEMP_PATH } from \"@/constants\";\r\nimport { copyAction } from \"@/components/system/actionMenu/ActionsList\";\r\n\r\n\nexport default /*#__PURE__*/_defineComponent({\n  props: {\r\n  itemDialog: Object as PropType<ItemDialog>,\r\n  height: { type: Number, default: 200 },\r\n},\n  setup(__props) {\n\nconst props = __props\n\r\n\r\n\r\nconst fileSystemStore = useFileSystemStore();\r\nconst { decompressFile, saveDecompressedFilesToDestination } = useCompression();\r\nconst items = ref<string[]>([]);\r\nconst showExtractHereDialog = ref<boolean>(false);\r\n\r\nonBeforeMount(async () => {\r\n  await decompressFileAndSave(TEMP_PATH);\r\n  if (props.itemDialog?.additionalOptions?.showExtractHereDialog) {\r\n    showExtractHereDialog.value = props.itemDialog.additionalOptions?.showExtractHereDialog;\r\n  }\r\n});\r\n\r\nonUnmounted(async () => {\r\n  console.log(\"deleting\", items.value);\r\n  for (const filePath of items.value) {\r\n    console.log(3, \"deleting\", filePath);\r\n    await fileSystemStore.deleteFileSystemItem(filePath);\r\n  }\r\n});\r\n\r\nconst doubleClickHandler = async (filePath: string) => {\r\n  const isDirectory = await isDir(filePath);\r\n  if (isDirectory) {\r\n    return;\r\n  } else {\r\n    const newItemDialog = {\r\n      path: filePath,\r\n      coordinates: { x: 0, y: 0 },\r\n      isSelected: true,\r\n    } as DesktopItem;\r\n    await fileSystemStore.createItemDialog(newItemDialog);\r\n  }\r\n};\r\n\r\nconst decompressFileAndSave = async (destinationFile: string) => {\r\n  if (props.itemDialog?.path) {\r\n    let compressed = await readFile(props.itemDialog?.path);\r\n\r\n    const decompressedFiles = decompressFile(compressed);\r\n\r\n    //TODO: From the decompressed files delete the part of the path common to all the files\r\n    // After that create the file structure, folders and paths. At the moment we have a flat structure\r\n\r\n    const allCompressedFiles = await saveDecompressedFilesToDestination(decompressedFiles, destinationFile);\r\n    //items.value = await getFiles(destinationFile); // TODO: this would be nice, now we have all the items flat in the directory\r\n    items.value = allCompressedFiles;\r\n\r\n    await fileSystemStore.refreshAllItemDialogFiles();\r\n    await fileSystemStore.fetchDesktopItems();\r\n    showExtractHereDialog.value = false;\r\n  }\r\n};\r\n\r\nconst rightClickItemHandler = (eventAndPath: { event: Event; filePath: string }) => {\r\n  openActionMenu(eventAndPath.event, false, eventAndPath.filePath);\r\n};\r\n\r\nconst openActionMenu = (event: any, isOpenedFolder = false, customPath: string) => {\r\n  event.preventDefault();\r\n  event.stopPropagation();\r\n  const pointerEvent = event as PointerEvent;\r\n\r\n  const customActions = [\r\n    copyAction([customPath], false, false),\r\n    {\r\n      materialIcon: \"mdi-open-in-new\",\r\n      iconOnly: false,\r\n      groupName: \"other\",\r\n      actionName: \"Open\",\r\n      horizontalGroup: false,\r\n      callback: () => doubleClickHandler(customPath),\r\n      disabled: false,\r\n    },\r\n  ];\r\n\r\n  fileSystemStore.setActionMenu({\r\n    show: true,\r\n    paths: customPath ? [customPath] : [props.itemDialog?.path],\r\n    position: { x: pointerEvent.clientX, y: pointerEvent.clientY },\r\n    customLayout: customActions,\r\n  } as ActionMenu);\r\n};\r\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"div\", {\n    style: _normalizeStyle(` width: calc(100% -4px); height:${__props.height - 5}px`)\n  }, [\n    (showExtractHereDialog.value)\n      ? (_openBlock(), _createBlock(SelectedFolderDialog, {\n          key: 0,\n          onOnFolderSelected: decompressFileAndSave,\n          onCloseDialog: _cache[0] || (_cache[0] = ($event: any) => (showExtractHereDialog.value = false)),\n          showSaveAsInput: false,\n          actionButtonText: \"Extract\"\n        }))\n      : _createCommentVNode(\"\", true),\n    _createVNode(FolderItemsList, {\n      height: __props.height - 10,\n      itemsList: items.value,\n      canRename: false,\n      isFocused: __props.itemDialog?.isFocused,\n      onOnDoubleClick: doubleClickHandler,\n      onOnRightClick: rightClickItemHandler\n    }, null, 8, [\"height\", \"itemsList\", \"isFocused\"])\n  ], 4))\n}\n}\n\n})","import script from \"./CompressedFileItem.vue?vue&type=script&lang=ts&setup=true\"\nexport * from \"./CompressedFileItem.vue?vue&type=script&lang=ts&setup=true\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["_defineComponent","props","itemDialog","Object","height","type","Number","default","setup","__props","fileSystemStore","useFileSystemStore","decompressFile","saveDecompressedFilesToDestination","useCompression","items","ref","showExtractHereDialog","onBeforeMount","decompressFileAndSave","TEMP_PATH","additionalOptions","value","onUnmounted","console","log","filePath","deleteFileSystemItem","doubleClickHandler","isDirectory","isDir","newItemDialog","path","coordinates","x","y","isSelected","createItemDialog","compressed","readFile","decompressedFiles","allCompressedFiles","destinationFile","refreshAllItemDialogFiles","fetchDesktopItems","rightClickItemHandler","eventAndPath","openActionMenu","event","isOpenedFolder","customPath","preventDefault","stopPropagation","pointerEvent","customActions","copyAction","materialIcon","iconOnly","groupName","actionName","horizontalGroup","callback","disabled","setActionMenu","show","paths","position","clientX","clientY","customLayout","_ctx","_cache","_openBlock","_createElementBlock","style","_normalizeStyle","_createBlock","SelectedFolderDialog","key","onOnFolderSelected","onCloseDialog","$event","showSaveAsInput","actionButtonText","_createCommentVNode","_createVNode","FolderItemsList","itemsList","canRename","isFocused","onOnDoubleClick","onOnRightClick","__exports__"],"sourceRoot":""}