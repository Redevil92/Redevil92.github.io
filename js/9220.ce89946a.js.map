{"version":3,"file":"js/9220.ce89946a.js","mappings":"uRAmBA,GAA4BA,EAAAA,EAAAA,IAAiB,CAC3CC,OAAQ,qBACRC,MAAO,CACPC,WAAYC,OACZC,OAAQ,CAAEC,KAAMC,OAAQC,QAAS,MAEjCC,KAAAA,CAAMC,GCYR,MAAMR,EAAQQ,EAKRC,GAAkBC,EAAAA,EAAAA,MAClB,eAAEC,EAAc,mCAAEC,IAAuCC,EAAAA,EAAAA,KACzDC,GAAQC,EAAAA,EAAAA,IAAc,IACtBC,GAAwBD,EAAAA,EAAAA,KAAa,IAE3CE,EAAAA,EAAAA,KAAcC,gBACNC,EAAsBC,EAAAA,IACxBpB,EAAMC,YAAYoB,mBAAmBL,wBACvCA,EAAsBM,MAAQtB,EAAMC,WAAWoB,mBAAmBL,sB,KAItEO,EAAAA,EAAAA,KAAYL,UACV,IAAK,MAAMM,KAAYV,EAAMQ,YACrBb,EAAgBgB,qBAAqBD,E,IAI/C,MAAME,EAAqBR,UACzB,MAAMS,QAAoBC,EAAAA,EAAWC,MAAML,GAC3C,IAAIG,EAEG,CACL,MAAMG,EAAgB,CACpBC,KAAMP,EACNQ,YAAa,CAAEC,EAAG,EAAGC,EAAG,GACxBC,YAAY,SAGR1B,EAAgB2B,iBAAiBN,E,GAIrCX,EAAwBD,UAC5B,GAAIlB,EAAMC,YAAY8B,KAAM,CAC1B,IAAIM,QAAmBT,EAAAA,EAAWU,SAAStC,EAAMC,YAAY8B,MAE7D,MAAMQ,EAAoB5B,EAAe0B,GAKnCG,QAA2B5B,EAAmC2B,EAAmBE,GAEvF3B,EAAMQ,MAAQkB,QAER/B,EAAgBiC,kCAChBjC,EAAgBkC,oBACtB3B,EAAsBM,OAAQ,C,GAI5BsB,EAAyBC,IAC7BC,EAAeD,EAAaE,OAAO,EAAOF,EAAarB,SAAS,EAG5DsB,EAAiB5B,MAAO6B,EAAYC,GAAiB,EAAOC,KAChEF,EAAMG,iBACNH,EAAMI,kBACN,MAAMC,EAAeL,EAEfM,EAAgB,EAACC,EAAAA,EAAAA,IAAW,CAACL,IAAa,GAAO,SAAcM,EAAAA,EAAAA,IAAe,CAACN,KAErFxC,EAAgB+C,cAAc,CAC5BC,MAAM,EACNC,MAAOT,EAAa,CAACA,GAAc,CAACjD,EAAMC,YAAY8B,MACtD4B,SAAU,CAAE1B,EAAGmB,EAAaQ,QAAS1B,EAAGkB,EAAaS,SACrDC,aAAcT,GACA,EDVlB,MAAO,CAACU,EAAUC,MACRC,EAAAA,EAAAA,OAAcC,EAAAA,EAAAA,IAAoB,MAAO,CAC/CC,OAAOC,EAAAA,EAAAA,IAAgB,mCAAmC5D,EAAQL,OAAS,QAC1E,CACAa,EAAsBM,QAClB2C,EAAAA,EAAAA,OAAcI,EAAAA,EAAAA,IAAaC,EAAAA,EAAsB,CAChDC,IAAK,EACLC,mBAAoBrD,EACpBsD,cAAeT,EAAO,KAAOA,EAAO,GAAMU,GAAiB1D,EAAsBM,OAAQ,GACzFqD,iBAAiB,EACjBC,iBAAkB,cAEpBC,EAAAA,EAAAA,IAAoB,IAAI,IAC5BC,EAAAA,EAAAA,IAAaC,EAAAA,WAAiB,CAC5B5E,OAAQK,EAAQL,OAAS,GACzB6E,UAAWlE,EAAMQ,MACjB2D,WAAW,EACXC,UAAW1E,EAAQP,YAAYiF,UAC/BC,gBAAiBzD,EACjB0D,eAAgBxC,GACf,KAAM,EAAG,CAAC,SAAU,YAAa,eACnC,GAEL,IExHA,MAAMyC,EAAc,EAEpB,O","sources":["webpack://my-portfolio/./src/components/apps/compressedFileItem/CompressedFileItem.vue?0d69","webpack://my-portfolio/./src/components/apps/compressedFileItem/CompressedFileItem.vue","webpack://my-portfolio/./src/components/apps/compressedFileItem/CompressedFileItem.vue?aef9"],"sourcesContent":["import { defineComponent as _defineComponent } from 'vue'\nimport { openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createVNode as _createVNode, normalizeStyle as _normalizeStyle, createElementBlock as _createElementBlock } from \"vue\"\n\nimport { onBeforeMount, onUnmounted, PropType, ref } from \"vue\";\r\n\r\nimport SelectedFolderDialog from \"@/components/shared/SelectedFolderDialog.vue\";\r\nimport FolderItemsList from \"@/components/apps/folderItem/FolderItemsList.vue\";\r\n\r\nimport ItemDialog from \"@/models/ItemDialog\";\r\nimport fileSystem from \"@/context/fileSystemController\";\r\nimport { useFileSystemStore } from \"@/stores/fileSystemStore\";\r\n\r\nimport DesktopItem from \"@/models/DesktopItem\";\r\nimport ActionMenu from \"@/models/ActionMenu/ActionMenu\";\r\nimport useCompression from \"@/hooks/useCompression\";\r\nimport { TEMP_PATH } from \"@/constants\";\r\nimport { copyAction, openFileAction } from \"@/components/system/actionMenu/actionsList\";\r\n\r\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'CompressedFileItem',\n  props: {\r\n  itemDialog: Object as PropType<ItemDialog>,\r\n  height: { type: Number, default: 200 },\r\n},\n  setup(__props) {\n\r\nconst props = __props;\r\n\r\nconst fileSystemStore = useFileSystemStore();\r\nconst { decompressFile, saveDecompressedFilesToDestination } = useCompression();\r\nconst items = ref<string[]>([]);\r\nconst showExtractHereDialog = ref<boolean>(false);\r\n\r\nonBeforeMount(async () => {\r\n  await decompressFileAndSave(TEMP_PATH);\r\n  if (props.itemDialog?.additionalOptions?.showExtractHereDialog) {\r\n    showExtractHereDialog.value = props.itemDialog.additionalOptions?.showExtractHereDialog;\r\n  }\r\n});\r\n\r\nonUnmounted(async () => {\r\n  for (const filePath of items.value) {\r\n    await fileSystemStore.deleteFileSystemItem(filePath);\r\n  }\r\n});\r\n\r\nconst doubleClickHandler = async (filePath: string) => {\r\n  const isDirectory = await fileSystem.isDir(filePath);\r\n  if (isDirectory) {\r\n    return;\r\n  } else {\r\n    const newItemDialog = {\r\n      path: filePath,\r\n      coordinates: { x: 0, y: 0 },\r\n      isSelected: true,\r\n    } as DesktopItem;\r\n\r\n    await fileSystemStore.createItemDialog(newItemDialog);\r\n  }\r\n};\r\n\r\nconst decompressFileAndSave = async (destinationFile: string) => {\r\n  if (props.itemDialog?.path) {\r\n    let compressed = await fileSystem.readFile(props.itemDialog?.path);\r\n\r\n    const decompressedFiles = decompressFile(compressed);\r\n\r\n    //TODO: From the decompressed files delete the part of the path common to all the files\r\n    // After that create the file structure, folders and paths. At the moment we have a flat structure\r\n\r\n    const allCompressedFiles = await saveDecompressedFilesToDestination(decompressedFiles, destinationFile);\r\n    //items.value = await getFiles(destinationFile); // TODO: this would be nice, now we have all the items flat in the directory\r\n    items.value = allCompressedFiles;\r\n\r\n    await fileSystemStore.refreshAllItemDialogFiles();\r\n    await fileSystemStore.fetchDesktopItems();\r\n    showExtractHereDialog.value = false;\r\n  }\r\n};\r\n\r\nconst rightClickItemHandler = (eventAndPath: { event: Event; filePath: string }) => {\r\n  openActionMenu(eventAndPath.event, false, eventAndPath.filePath);\r\n};\r\n\r\nconst openActionMenu = async (event: any, isOpenedFolder = false, customPath: string) => {\r\n  event.preventDefault();\r\n  event.stopPropagation();\r\n  const pointerEvent = event as PointerEvent;\r\n\r\n  const customActions = [copyAction([customPath], false, false), await openFileAction([customPath])];\r\n\r\n  fileSystemStore.setActionMenu({\r\n    show: true,\r\n    paths: customPath ? [customPath] : [props.itemDialog?.path],\r\n    position: { x: pointerEvent.clientX, y: pointerEvent.clientY },\r\n    customLayout: customActions,\r\n  } as ActionMenu);\r\n};\r\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"div\", {\n    style: _normalizeStyle(` width: calc(100% -4px); height:${__props.height - 5}px`)\n  }, [\n    (showExtractHereDialog.value)\n      ? (_openBlock(), _createBlock(SelectedFolderDialog, {\n          key: 0,\n          onOnFolderSelected: decompressFileAndSave,\n          onCloseDialog: _cache[0] || (_cache[0] = ($event: any) => (showExtractHereDialog.value = false)),\n          showSaveAsInput: false,\n          actionButtonText: \"Extract\"\n        }))\n      : _createCommentVNode(\"\", true),\n    _createVNode(FolderItemsList, {\n      height: __props.height - 10,\n      itemsList: items.value,\n      canRename: false,\n      isFocused: __props.itemDialog?.isFocused,\n      onOnDoubleClick: doubleClickHandler,\n      onOnRightClick: rightClickItemHandler\n    }, null, 8, [\"height\", \"itemsList\", \"isFocused\"])\n  ], 4))\n}\n}\n\n})","<template>\r\n  <div :style=\"` width: calc(100% -4px); height:${height - 5}px`\">\r\n    <SelectedFolderDialog\r\n      v-if=\"showExtractHereDialog\"\r\n      @onFolderSelected=\"decompressFileAndSave\"\r\n      @closeDialog=\"showExtractHereDialog = false\"\r\n      :showSaveAsInput=\"false\"\r\n      actionButtonText=\"Extract\"\r\n    ></SelectedFolderDialog>\r\n\r\n    <FolderItemsList\r\n      :height=\"height - 10\"\r\n      :itemsList=\"items\"\r\n      :canRename=\"false\"\r\n      :isFocused=\"itemDialog?.isFocused\"\r\n      @onDoubleClick=\"doubleClickHandler\"\r\n      @onRightClick=\"rightClickItemHandler\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\" setup>\r\nimport { onBeforeMount, onUnmounted, PropType, ref } from \"vue\";\r\n\r\nimport SelectedFolderDialog from \"@/components/shared/SelectedFolderDialog.vue\";\r\nimport FolderItemsList from \"@/components/apps/folderItem/FolderItemsList.vue\";\r\n\r\nimport ItemDialog from \"@/models/ItemDialog\";\r\nimport fileSystem from \"@/context/fileSystemController\";\r\nimport { useFileSystemStore } from \"@/stores/fileSystemStore\";\r\n\r\nimport DesktopItem from \"@/models/DesktopItem\";\r\nimport ActionMenu from \"@/models/ActionMenu/ActionMenu\";\r\nimport useCompression from \"@/hooks/useCompression\";\r\nimport { TEMP_PATH } from \"@/constants\";\r\nimport { copyAction, openFileAction } from \"@/components/system/actionMenu/actionsList\";\r\n\r\nconst props = defineProps({\r\n  itemDialog: Object as PropType<ItemDialog>,\r\n  height: { type: Number, default: 200 },\r\n});\r\n\r\nconst fileSystemStore = useFileSystemStore();\r\nconst { decompressFile, saveDecompressedFilesToDestination } = useCompression();\r\nconst items = ref<string[]>([]);\r\nconst showExtractHereDialog = ref<boolean>(false);\r\n\r\nonBeforeMount(async () => {\r\n  await decompressFileAndSave(TEMP_PATH);\r\n  if (props.itemDialog?.additionalOptions?.showExtractHereDialog) {\r\n    showExtractHereDialog.value = props.itemDialog.additionalOptions?.showExtractHereDialog;\r\n  }\r\n});\r\n\r\nonUnmounted(async () => {\r\n  for (const filePath of items.value) {\r\n    await fileSystemStore.deleteFileSystemItem(filePath);\r\n  }\r\n});\r\n\r\nconst doubleClickHandler = async (filePath: string) => {\r\n  const isDirectory = await fileSystem.isDir(filePath);\r\n  if (isDirectory) {\r\n    return;\r\n  } else {\r\n    const newItemDialog = {\r\n      path: filePath,\r\n      coordinates: { x: 0, y: 0 },\r\n      isSelected: true,\r\n    } as DesktopItem;\r\n\r\n    await fileSystemStore.createItemDialog(newItemDialog);\r\n  }\r\n};\r\n\r\nconst decompressFileAndSave = async (destinationFile: string) => {\r\n  if (props.itemDialog?.path) {\r\n    let compressed = await fileSystem.readFile(props.itemDialog?.path);\r\n\r\n    const decompressedFiles = decompressFile(compressed);\r\n\r\n    //TODO: From the decompressed files delete the part of the path common to all the files\r\n    // After that create the file structure, folders and paths. At the moment we have a flat structure\r\n\r\n    const allCompressedFiles = await saveDecompressedFilesToDestination(decompressedFiles, destinationFile);\r\n    //items.value = await getFiles(destinationFile); // TODO: this would be nice, now we have all the items flat in the directory\r\n    items.value = allCompressedFiles;\r\n\r\n    await fileSystemStore.refreshAllItemDialogFiles();\r\n    await fileSystemStore.fetchDesktopItems();\r\n    showExtractHereDialog.value = false;\r\n  }\r\n};\r\n\r\nconst rightClickItemHandler = (eventAndPath: { event: Event; filePath: string }) => {\r\n  openActionMenu(eventAndPath.event, false, eventAndPath.filePath);\r\n};\r\n\r\nconst openActionMenu = async (event: any, isOpenedFolder = false, customPath: string) => {\r\n  event.preventDefault();\r\n  event.stopPropagation();\r\n  const pointerEvent = event as PointerEvent;\r\n\r\n  const customActions = [copyAction([customPath], false, false), await openFileAction([customPath])];\r\n\r\n  fileSystemStore.setActionMenu({\r\n    show: true,\r\n    paths: customPath ? [customPath] : [props.itemDialog?.path],\r\n    position: { x: pointerEvent.clientX, y: pointerEvent.clientY },\r\n    customLayout: customActions,\r\n  } as ActionMenu);\r\n};\r\n</script>\r\n\r\n<style scoped></style>\r\n","import script from \"./CompressedFileItem.vue?vue&type=script&lang=ts&setup=true\"\nexport * from \"./CompressedFileItem.vue?vue&type=script&lang=ts&setup=true\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["_defineComponent","__name","props","itemDialog","Object","height","type","Number","default","setup","__props","fileSystemStore","useFileSystemStore","decompressFile","saveDecompressedFilesToDestination","useCompression","items","ref","showExtractHereDialog","onBeforeMount","async","decompressFileAndSave","TEMP_PATH","additionalOptions","value","onUnmounted","filePath","deleteFileSystemItem","doubleClickHandler","isDirectory","fileSystem","isDir","newItemDialog","path","coordinates","x","y","isSelected","createItemDialog","compressed","readFile","decompressedFiles","allCompressedFiles","destinationFile","refreshAllItemDialogFiles","fetchDesktopItems","rightClickItemHandler","eventAndPath","openActionMenu","event","isOpenedFolder","customPath","preventDefault","stopPropagation","pointerEvent","customActions","copyAction","openFileAction","setActionMenu","show","paths","position","clientX","clientY","customLayout","_ctx","_cache","_openBlock","_createElementBlock","style","_normalizeStyle","_createBlock","SelectedFolderDialog","key","onOnFolderSelected","onCloseDialog","$event","showSaveAsInput","actionButtonText","_createCommentVNode","_createVNode","FolderItemsList","itemsList","canRename","isFocused","onOnDoubleClick","onOnRightClick","__exports__"],"sourceRoot":""}